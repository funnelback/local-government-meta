{"version":3,"file":"js/NotificationSettings-213b35a299d41008184b.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/_global/js/uuid.js","webpack://Plug-and-Play-Template/./src/modules/modal/jsx/modal.jsx","webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/libs/PromiseDebouncer.js","webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/Services/UserService/UserService.js","webpack://Plug-and-Play-Template/./src/modules/_data-layer/jsx/Contexts/UserContext/UserContext.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications-settings/jsx/notification-settings.jsx"],"sourcesContent":["/* eslint-disable no-bitwise */\n/**\n * Generate a (mostly) unique ID in an RFC4122 version 4 compliant format\n * Function ported from initFormSubmissionHandler.\n *\n * @returns String\n *\n * @source https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid\n */\nexport default function uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\n        (\n            c ^\n            (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\n        ).toString(16)\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */ // Disabled as prop spreading is the documented way to use the @react-aria framework\nimport React, { useEffect } from 'react';\nimport {\n    useOverlay,\n    usePreventScroll,\n    useModal,\n    OverlayContainer,\n} from '@react-aria/overlays';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope, useFocusManager } from '@react-aria/focus';\n\n/**\n * React implementation of the Plug and Play Modal, uses the Adobe @react-aria package\n * to handle the modal / dialog related accessability concerns such as focus movement, focus traps,\n * ESC to close ect.\n *\n * Needs to be wrapped within a <OverlayProvider> to aria hide the application when the modal opens.\n *\n * Comments on @react-aria hooks come directly from their documentation.\n */\nexport default function Modal({\n    titleId,\n    title,\n    onClose,\n    children,\n    className,\n}) {\n    return (\n        <OverlayContainer>\n            <div\n                className={`no-wysiwyg modal-wrapper ${\n                    className ? `${className}-wrapper` : ''\n                }`}\n            >\n                <FocusScope contain restoreFocus autoFocus>\n                    <ModalContent\n                        titleId={titleId}\n                        title={title}\n                        onClose={onClose}\n                        className={className}\n                    >\n                        {children}\n                    </ModalContent>\n                </FocusScope>\n            </div>\n        </OverlayContainer>\n    );\n}\n\nfunction ModalContent({ titleId, title, onClose, children, className }) {\n    // Base settings for @react-aria hooks\n    const settings = {\n        'aria-describedby': titleId,\n        title,\n        onClose,\n        isDismissable: true,\n        isOpen: true,\n    };\n\n    const modalRef = React.useRef();\n    const modalContentRef = React.useRef();\n    const focusManager = useFocusManager();\n\n    /*\n        Provides the behavior for overlays such as dialogs, popovers, and menus. Hides the overlay when\n        the user interacts outside it, when the Escape key is pressed, or optionally, on blur.\n    */\n    const { overlayProps, underlayProps } = useOverlay(\n        settings,\n        modalContentRef\n    );\n\n    /*\n        Prevents scrolling on the document body on mount, and restores it on unmount.\n        Also ensures that content does not shift due to the scrollbars disappearing.\n    */\n    usePreventScroll();\n\n    /*\n        Hides content outside the current <OverlayContainer> from screen readers on mount and restores it on unmount.\n    */\n    const { modalProps } = useModal();\n\n    /*\n        Provides the behavior and accessibility implementation for a dialog component.\n    */\n    const { dialogProps, titleProps } = useDialog(settings, modalContentRef);\n\n    /*\n        Remove the hidden attribute as soon as its drawn to the DOM so it transitions open like\n        the base ES6 modal in the framework.\n    */\n    useEffect(() => {\n        modalRef.current.removeAttribute('hidden');\n        focusManager.focusFirst(); // FocusScope autofocus property wont work due to being hidden so focus first now\n    }, [modalRef]);\n\n    return (\n        <div\n            ref={modalRef}\n            {...underlayProps}\n            hidden\n            className={`modal ${className || ''}`}\n        >\n            <div\n                ref={modalContentRef}\n                {...overlayProps}\n                {...dialogProps}\n                {...modalProps}\n                aria-modal=\"true\"\n                tabIndex=\"-1\"\n                className={`modal__content ${\n                    className ? `${className}__content` : ''\n                }`}\n            >\n                {titleId ? (\n                    ''\n                ) : (\n                    <h2\n                        {...titleProps}\n                        className={`${className ? `${className}__title` : ''}`}\n                    >\n                        {title}\n                    </h2>\n                )}\n                {children}\n            </div>\n        </div>\n    );\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\n// eslint-disable-next-line import/prefer-default-export\nexport class PromiseDebouncer {\n    constructor() {\n        this.requests = new Map();\n    }\n\n    debounce(key, promiseFactory) {\n        const keyForComparison = JSON.stringify(key);\n        if (!this.requests.has(keyForComparison)) {\n            const promise = promiseFactory();\n            // Clean up after the promise.\n            promise.finally(() => {\n                this.requests.delete(keyForComparison);\n            });\n            this.requests.set(keyForComparison, promise);\n        }\n        return this.requests.get(keyForComparison);\n    }\n\n    get(key) {\n        return this.requests.get(JSON.stringify(key));\n    }\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\nimport { PromiseDebouncer } from '../../libs/PromiseDebouncer';\n\n/* eslint-disable import/prefer-default-export */\n\nexport class UserService {\n    constructor(dto) {\n        if (!dto) {\n            throw new Error(\n                `dto is required when instantiating a new UserService`\n            );\n        }\n\n        [`userAdapter`].forEach((name) => {\n            if (!dto[name]) {\n                throw new Error(\n                    `${name} property is required when instantiating a new UserService`\n                );\n            }\n        });\n\n        this.promiseDebouncer = new PromiseDebouncer();\n        this.userAdapter = dto.userAdapter;\n    }\n\n    /**\n     * Get user.\n     * @param {string} userId The user id.\n     *\n     * @returns {Promise<object>} A promised user.\n     */\n    get(userId) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                userId,\n            },\n            () => this.userAdapter.get(userId)\n        );\n    }\n\n    /**\n     * Update an user with new values.\n     *\n     * @param {string} documentId The user id.\n     * @param {object} user The user data to replace.\n     *\n     * @returns {Promise<object>} The result of the update.\n     */\n    setAll(user, documentId) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                documentId,\n            },\n            () => this.userAdapter.setAll(user, documentId)\n        );\n    }\n\n    /**\n     * Method will toggle given key in array.\n     *\n     * @param {string} notificationKey Notification key we need to toggle.\n     * @param {object} user User object.\n     *\n     * @return {Promise<object>} The result of the update.\n     */\n    updateNotifications(notificationKey, user) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                notificationKey,\n            },\n            () => this.userAdapter.updateNotifications(notificationKey, user)\n        );\n    }\n\n    /**\n     * Method will toggle push notifications on/off.\n     *\n     * @param {bool} toggle Flag determining if notifications should be on or off.\n     * @param {string} documentId For multiple promises only.\n     *\n     * @return {Promise<object>} The result of the update.\n     */\n    toggleNotifications(toggle, documentId) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                documentId,\n            },\n            () => this.userAdapter.toggleNotifications(toggle)\n        );\n    }\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\nimport React, { createContext, useCallback, useEffect, useState } from 'react';\n\n/**\n * The user context provider.\n * @param {object} props The events provider props.\n * @returns {JSX.Element} Event context provider component.\n */\nexport const UserProvider = ({ children, userService, userId }) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isReady, setIsReady] = useState(false);\n    const [user, setUser] = useState([]);\n\n    // Load user object from adapter and update internal state with fetched object.\n    useEffect(() => {\n        setIsLoading(true);\n\n        userService.get(userId).then((response) => {\n            setUser(response);\n            setIsLoading(false);\n            setIsReady(true);\n        });\n    }, [user]);\n\n    // Calls adapter method in order to update user with updated values.\n    const updateUser = useCallback(\n        (id, newUser) => {\n            setIsLoading(true);\n\n            return userService.setAll(newUser, id).then((result) => {\n                setUser(result);\n                setIsLoading(false);\n                setIsReady(true);\n            });\n        },\n        [user]\n    );\n\n    // Calls adapter method in order to update user push notifications preferences.\n    const toggleNotifications = useCallback(\n        (toggle) => {\n            setIsLoading(true);\n\n            return userService.toggleNotifications(toggle).then((result) => {\n                setUser(result);\n                setIsLoading(false);\n                setIsReady(true);\n            });\n        },\n        [user]\n    );\n\n    // Calls adapter method in order to update user notifications preferences.\n    const updateNotifications = useCallback(\n        (notifications) => {\n            setIsLoading(true);\n\n            return userService\n                .updateNotifications(notifications, user)\n                .then((result) => {\n                    setUser(result);\n                    setIsLoading(false);\n                    setIsReady(true);\n                });\n        },\n        [user]\n    );\n\n    return (\n        <UserContext.Provider\n            value={{\n                user,\n                userService,\n                isLoading,\n                isReady,\n                updateUser,\n                updateNotifications,\n                toggleNotifications,\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    );\n};\n\n/**\n * The context for user.\n * @export\n */\nexport const UserContext = createContext({\n    user: {},\n    userId: null,\n    userService: null,\n    isLoading: false,\n    isReady: false,\n    updateUser: () => {},\n    updateNotifications: () => {},\n    toggleNotifications: () => {},\n});\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable no-prototype-builtins */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState, useCallback, useContext } from 'react';\nimport { OverlayProvider } from '@react-aria/overlays';\nimport PropTypes from 'prop-types';\n\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport { UserService } from 'PlugAndPlay/_data-layer/js/global';\nimport { UserProvider, UserContext } from 'PlugAndPlay/_data-layer/jsx/global';\n\nimport Modal from '../../modal/jsx/modal';\n\nfunction NotificationsSettingsModal(props) {\n    const { title, pushNotificationsLabel, fieldsSpec } = props;\n\n    const {\n        user,\n        isReady,\n        isLoading,\n        updateUser,\n        updateNotifications,\n        toggleNotifications,\n    } = useContext(UserContext);\n\n    const [supportNotifications, setSupportNotification] = useState(false);\n    const [student, setStudent] = useState(null);\n    const [pushStatus, setPushStatus] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n    const toggleModal = useCallback(() => {\n        setShowModal(!showModal);\n    }, [showModal]);\n\n    // This is to make sure our input fields have unique ids.\n    const fieldId = uuidv4();\n\n    // After fetching user object we are setting him in local state.\n    useEffect(() => {\n        setStudent(user);\n    }, [isReady]);\n\n    // Safari and iOS does not support notifications, we wont show panel.\n    useEffect(() => {\n        const agent = window.navigator.userAgent;\n        const iOS = !!agent.match(/iphone/i);\n        const safari = !!agent.match(/crios/i);\n        const supported = !(iOS || safari);\n\n        setSupportNotification(supported);\n    }, [isReady]);\n\n    // Call context and update user notification type preferences.\n    const toggleExcludedField = useCallback(\n        async (key) => {\n            await updateNotifications(key);\n            setStudent(user);\n        },\n        [user]\n    );\n\n    // Call context and update user push notifications preferences.\n    const togglePushNotifications = useCallback(\n        async (key) => {\n            setPushStatus(await toggleNotifications(key));\n        },\n        [user]\n    );\n\n    // Update user with new notification preferences.\n    const updateNotificationSettings = useCallback(async () => {\n        await updateUser(student);\n        setShowModal(false);\n    }, [student, pushStatus, supportNotifications]);\n\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n\n    return (\n        <>\n            <button\n                type=\"button\"\n                className=\"notifications-settings__action\"\n                onClick={toggleModal}\n            >\n                Notification settings\n            </button>\n\n            {showModal && (\n                <Modal\n                    onClose={toggleModal}\n                    titleId={titleId}\n                    className=\"notifications-settings-modal\"\n                >\n                    <header className=\"notifications-settings-modal__header\">\n                        <h1\n                            id={titleId}\n                            className=\"notifications-settings-modal__title\"\n                        >\n                            {title}\n                        </h1>\n                        <button\n                            type=\"button\"\n                            onClick={toggleModal}\n                            className=\"notifications-settings-modal__header-close\"\n                        >\n                            <svg className=\"svg-icon\">\n                                <title>Close modal</title>\n                                <use href=\"#close\" />\n                            </svg>\n                        </button>\n                    </header>\n                    <div className=\"custom-form notifications-settings notifications-settings__container\">\n                        <div className=\"sq-form-question-answer\">\n                            <ul>\n                                {supportNotifications && (\n                                    <li className=\"notifications-settings__switch-item\">\n                                        <div className=\"notifications-settings__notifications-switch\">\n                                            <svg className=\"svg-icon notifications-settings__notifications-icon\">\n                                                <use href=\"#notification\" />\n                                            </svg>\n                                            <h2 className=\"notifications-settings__label\">\n                                                Push notifications\n                                            </h2>\n                                            <div className=\"switch\">\n                                                <input\n                                                    className=\"switch__input\"\n                                                    type=\"checkbox\"\n                                                    id={`switch-input-${fieldId}`}\n                                                    onChange={\n                                                        togglePushNotifications\n                                                    }\n                                                    value={pushStatus}\n                                                    disabled={!isReady}\n                                                    aria-describedby={`switch-status-${fieldId}`}\n                                                    aria-labelledby={`switch-description-${fieldId}`}\n                                                />\n                                                <label\n                                                    id={`switch-description-${fieldId}`}\n                                                    className=\"switch__label\"\n                                                    htmlFor={`switch-input-${fieldId}`}\n                                                >\n                                                    Toggle push notifications\n                                                </label>\n                                                <div\n                                                    className=\"switch__marker\"\n                                                    aria-hidden=\"true\"\n                                                />\n                                            </div>\n                                        </div>\n                                        <small\n                                            id={`switch-status-${fieldId}`}\n                                            className=\"notifications-settings__description\"\n                                        >\n                                            {' '}\n                                            {pushNotificationsLabel}\n                                        </small>\n                                    </li>\n                                )}\n                                {isReady &&\n                                    fieldsSpec.map(\n                                        ({ id, label, description, key }) => {\n                                            const labelId = uuidv4();\n                                            return (\n                                                <li\n                                                    key={id}\n                                                    className=\"notifications-settings__switch-item\"\n                                                >\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        name={id}\n                                                        id={`${id}-${labelId}`}\n                                                        value={\n                                                            student.excludeNotificationTypes &&\n                                                            student.excludeNotificationTypes.includes(\n                                                                key\n                                                            )\n                                                        }\n                                                        disabled={!isReady}\n                                                        onChange={() =>\n                                                            toggleExcludedField(\n                                                                key\n                                                            )\n                                                        }\n                                                        className=\"sq-form-field\"\n                                                        aria-describedby={`${id}-${labelId}-description`}\n                                                        aria-labelledby={`${id}-${labelId}-label`}\n                                                    />\n                                                    <label\n                                                        id={`${id}-${labelId}-label`}\n                                                        htmlFor={`${id}-${labelId}`}\n                                                        className=\"notifications-settings__label\"\n                                                    >\n                                                        {label}\n                                                    </label>\n                                                    <small\n                                                        id={`${id}-${labelId}-description`}\n                                                        className=\"notifications-settings__description\"\n                                                    >\n                                                        {description}\n                                                    </small>\n                                                </li>\n                                            );\n                                        }\n                                    )}\n                            </ul>\n                        </div>\n                        <footer className=\"notifications-settings-modal__footer\">\n                            <button\n                                className=\"notifications-settings-modal__footer-button\"\n                                type=\"button\"\n                                onClick={updateNotificationSettings}\n                                disabled={isLoading}\n                            >\n                                Update notifications\n                                <span className=\"sr-only\">\n                                    {` `} Modal will be closed after pressing\n                                    update{' '}\n                                </span>\n                            </button>\n                        </footer>\n                    </div>\n                </Modal>\n            )}\n        </>\n    );\n}\n\nexport default function NotificationSettings(props) {\n    const { userAdapter, documentId } = props;\n\n    const userService = new UserService({ userAdapter });\n\n    return (\n        <OverlayProvider>\n            <UserProvider\n                userService={userService}\n                userId={documentId}\n                key={documentId}\n            >\n                <NotificationsSettingsModal {...props} />\n            </UserProvider>\n        </OverlayProvider>\n    );\n}\n\nconst { string, number, func, oneOfType, arrayOf, shape } = PropTypes;\n\nNotificationSettings.propTypes = {\n    title: string,\n    documentId: oneOfType([string, number]),\n    onDialogClose: func,\n    pushNotificationsLabel: string,\n    fieldsSpec: arrayOf(\n        shape({\n            id: string,\n            label: string,\n            description: string,\n            key: string,\n        })\n    ),\n};\n\nNotificationSettings.defaultProps = {\n    title: `Notifications settings`,\n    documentId: `666`,\n    onDialogClose: () => {},\n    pushNotificationsLabel: `Most students enable push notifications to stay on top of their studies. This will allow\n    you to receive notifications directly to this device.`,\n    fieldsSpec: [\n        {\n            id: `assignment_reminder`,\n            label: `Assignment reminder`,\n            description: `Remind me about assignments 1 day before their due date.`,\n            key: `assignment_reminder`,\n        },\n        {\n            id: `canvas_announcement`,\n            label: `Course announcements`,\n            description: `Announcements related to one of my courses.`,\n            key: `canvas_announcement`,\n        },\n    ],\n};\n"],"names":["uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","Modal","titleId","title","onClose","children","className","contain","restoreFocus","autoFocus","ModalContent","settings","isDismissable","isOpen","modalRef","React","modalContentRef","focusManager","useFocusManager","overlayProps","underlayProps","useOverlay","usePreventScroll","modalProps","useModal","dialogProps","titleProps","useDialog","useEffect","current","removeAttribute","focusFirst","ref","hidden","tabIndex","PromiseDebouncer","constructor","this","requests","Map","debounce","key","promiseFactory","keyForComparison","JSON","stringify","has","promise","finally","delete","set","get","UserService","dto","Error","forEach","name","promiseDebouncer","userAdapter","userId","method","setAll","user","documentId","updateNotifications","notificationKey","toggleNotifications","toggle","UserProvider","userService","isLoading","setIsLoading","useState","isReady","setIsReady","setUser","then","response","updateUser","useCallback","id","newUser","result","notifications","UserContext","Provider","value","createContext","NotificationsSettingsModal","props","pushNotificationsLabel","fieldsSpec","useContext","supportNotifications","setSupportNotification","student","setStudent","pushStatus","setPushStatus","showModal","setShowModal","toggleModal","fieldId","agent","window","navigator","userAgent","iOS","match","safari","toggleExcludedField","async","togglePushNotifications","updateNotificationSettings","type","onClick","href","onChange","disabled","htmlFor","map","label","description","labelId","excludeNotificationTypes","includes","NotificationSettings","string","number","func","oneOfType","arrayOf","shape","PropTypes","propTypes","onDialogClose","defaultProps"],"sourceRoot":""}