{"version":3,"file":"js/AnalyticsProvider-69d33beb9c51252f6b65.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/Services/UserService/UserService.js","webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/libs/PromiseDebouncer.js","webpack://Plug-and-Play-Template/./src/modules/_data-layer/jsx/Contexts/UserContext/UserContext.jsx","webpack://Plug-and-Play-Template/./src/modules/collapsible-card/jsx/Card.jsx","webpack://Plug-and-Play-Template/./src/modules/_global/js/interpolate.js","webpack://Plug-and-Play-Template/./src/modules/circular-progress/jsx/circular-progress.jsx","webpack://Plug-and-Play-Template/./src/modules/edify-GPA/jsx/analytics.jsx","webpack://Plug-and-Play-Template/./src/modules/_data-layer/jsx/Hooks/User/useUser.jsx"],"sourcesContent":["/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\nimport { PromiseDebouncer } from '../../libs/PromiseDebouncer';\n\n/* eslint-disable import/prefer-default-export */\n\nexport class UserService {\n    constructor(dto) {\n        if (!dto) {\n            throw new Error(\n                `dto is required when instantiating a new UserService`\n            );\n        }\n\n        [`userAdapter`].forEach((name) => {\n            if (!dto[name]) {\n                throw new Error(\n                    `${name} property is required when instantiating a new UserService`\n                );\n            }\n        });\n\n        this.promiseDebouncer = new PromiseDebouncer();\n        this.userAdapter = dto.userAdapter;\n    }\n\n    /**\n     * Get user.\n     * @param {string} userId The user id.\n     *\n     * @returns {Promise<object>} A promised user.\n     */\n    get(userId) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                userId,\n            },\n            () => this.userAdapter.get(userId)\n        );\n    }\n\n    /**\n     * Update an user with new values.\n     *\n     * @param {string} documentId The user id.\n     * @param {object} user The user data to replace.\n     *\n     * @returns {Promise<object>} The result of the update.\n     */\n    setAll(user, documentId) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                documentId,\n            },\n            () => this.userAdapter.setAll(user, documentId)\n        );\n    }\n\n    /**\n     * Method will toggle given key in array.\n     *\n     * @param {string} notificationKey Notification key we need to toggle.\n     * @param {object} user User object.\n     *\n     * @return {Promise<object>} The result of the update.\n     */\n    updateNotifications(notificationKey, user) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                notificationKey,\n            },\n            () => this.userAdapter.updateNotifications(notificationKey, user)\n        );\n    }\n\n    /**\n     * Method will toggle push notifications on/off.\n     *\n     * @param {bool} toggle Flag determining if notifications should be on or off.\n     * @param {string} documentId For multiple promises only.\n     *\n     * @return {Promise<object>} The result of the update.\n     */\n    toggleNotifications(toggle, documentId) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `get`,\n                documentId,\n            },\n            () => this.userAdapter.toggleNotifications(toggle)\n        );\n    }\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\n// eslint-disable-next-line import/prefer-default-export\nexport class PromiseDebouncer {\n    constructor() {\n        this.requests = new Map();\n    }\n\n    debounce(key, promiseFactory) {\n        const keyForComparison = JSON.stringify(key);\n        if (!this.requests.has(keyForComparison)) {\n            const promise = promiseFactory();\n            // Clean up after the promise.\n            promise.finally(() => {\n                this.requests.delete(keyForComparison);\n            });\n            this.requests.set(keyForComparison, promise);\n        }\n        return this.requests.get(keyForComparison);\n    }\n\n    get(key) {\n        return this.requests.get(JSON.stringify(key));\n    }\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\nimport React, { createContext, useCallback, useEffect, useState } from 'react';\n\n/**\n * The user context provider.\n * @param {object} props The events provider props.\n * @returns {JSX.Element} Event context provider component.\n */\nexport const UserProvider = ({ children, userService, userId }) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isReady, setIsReady] = useState(false);\n    const [user, setUser] = useState([]);\n\n    // Load user object from adapter and update internal state with fetched object.\n    useEffect(() => {\n        setIsLoading(true);\n\n        userService.get(userId).then((response) => {\n            setUser(response);\n            setIsLoading(false);\n            setIsReady(true);\n        });\n    }, [user]);\n\n    // Calls adapter method in order to update user with updated values.\n    const updateUser = useCallback(\n        (id, newUser) => {\n            setIsLoading(true);\n\n            return userService.setAll(newUser, id).then((result) => {\n                setUser(result);\n                setIsLoading(false);\n                setIsReady(true);\n            });\n        },\n        [user]\n    );\n\n    // Calls adapter method in order to update user push notifications preferences.\n    const toggleNotifications = useCallback(\n        (toggle) => {\n            setIsLoading(true);\n\n            return userService.toggleNotifications(toggle).then((result) => {\n                setUser(result);\n                setIsLoading(false);\n                setIsReady(true);\n            });\n        },\n        [user]\n    );\n\n    // Calls adapter method in order to update user notifications preferences.\n    const updateNotifications = useCallback(\n        (notifications) => {\n            setIsLoading(true);\n\n            return userService\n                .updateNotifications(notifications, user)\n                .then((result) => {\n                    setUser(result);\n                    setIsLoading(false);\n                    setIsReady(true);\n                });\n        },\n        [user]\n    );\n\n    return (\n        <UserContext.Provider\n            value={{\n                user,\n                userService,\n                isLoading,\n                isReady,\n                updateUser,\n                updateNotifications,\n                toggleNotifications,\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    );\n};\n\n/**\n * The context for user.\n * @export\n */\nexport const UserContext = createContext({\n    user: {},\n    userId: null,\n    userService: null,\n    isLoading: false,\n    isReady: false,\n    updateUser: () => {},\n    updateNotifications: () => {},\n    toggleNotifications: () => {},\n});\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useCallback, useState } from 'react';\n\nexport default function Card(props) {\n    const {\n        wrapperClasses,\n        contentClasses,\n        children,\n        id,\n        headingIcon,\n        isCollapsable,\n        isInitialCollapsed,\n        isScrollable,\n        subTitle,\n        title,\n        ...rest\n    } = props;\n\n    let storageId = ``;\n\n    if (id) {\n        storageId = `ComponentCard-${id}`;\n    }\n\n    let storageIsCollapsed = isInitialCollapsed || false;\n    if (storageId) {\n        storageIsCollapsed = localStorage.getItem(storageId) === `collapsed`;\n    }\n\n    const [isCollapsed, setCollapsed] = useState(storageIsCollapsed);\n\n    const wrapperClass = [\n        'collapsable-card',\n        'no-wysiwyg',\n        wrapperClasses,\n    ].join(' ');\n    const contentClass = [\n        'collapsable-card__contents',\n        contentClasses,\n        isScrollable && 'collapsable-card--scrollable',\n    ].join(' ');\n    const collapseClass = [\n        'svg-icon',\n        isCollapsed === false && 'collapsable-card__collapsed',\n    ].join(' ');\n\n    const toggleIsCollapsed = useCallback(() => {\n        setCollapsed(!isCollapsed);\n\n        if (storageId) {\n            localStorage.setItem(storageId, !isCollapsed ? `collapsed` : ``);\n        }\n    }, [storageId, isCollapsed]);\n\n    return (\n        <div className={wrapperClass} id={id} {...rest}>\n            <div className=\"collapsable-card__header\">\n                <h2 className=\"collapsable-card__header-text\">{title}</h2>\n                <div className=\"collapsable-card__header-right\">\n                    {subTitle && (\n                        <h3 className=\"collapsable-card__header-text collapsable-card__header-text--sub-title\">\n                            {subTitle}\n                        </h3>\n                    )}\n                    {isCollapsable && (\n                        <button\n                            type=\"button\"\n                            onClick={toggleIsCollapsed}\n                            className=\"collapsable-card__more-menu-button\"\n                            aria-expanded={!isCollapsed}\n                            aria-controls={`content-${id}`}\n                        >\n                            <svg className={collapseClass}>\n                                <title>\n                                    {isCollapsed\n                                        ? `Expand panel`\n                                        : `Collapse panel`}\n                                </title>\n                                <use href=\"#chevron\" />\n                            </svg>\n                        </button>\n                    )}\n                    {headingIcon}\n                </div>\n            </div>\n            {(isCollapsable !== true ||\n                (isCollapsable === true && isCollapsed === false)) && (\n                <div\n                    className={contentClass}\n                    id={`content-${id}`}\n                    role=\"region\"\n                    tabIndex={-1}\n                >\n                    {children}\n                </div>\n            )}\n        </div>\n    );\n}\n","/**\n * Replace strings in given mustache template.\n *\n * @param {string} template Template string.\n * @param {object} data Data to be replaced.\n *\n * @returns {string}\n */\nexport default function interpolate(template, data) {\n    const interpolated = template.replace(/{([^{}]+)}/g, (keyExpr, key) =>\n        data[key] !== undefined ? `${data[key]}` : ``\n    );\n\n    return interpolated;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport interpolate from '../../_global/js/interpolate';\n\nexport default function CircularProgress(props) {\n    const {\n        strokeWidth,\n        percentage,\n        scale,\n        showProgress,\n        wrapperClasses,\n        descriptionTemplate,\n        animation,\n        children,\n    } = props;\n\n    const wrapperClass = [\n        'circular-progress-circle',\n        'circular-progress-circle__container',\n        wrapperClasses,\n    ].join(' ');\n\n    // We have to change the radius of the circle so that the formula (Circumference / scale) * Percentage to fill equals Percentage to fill.\n    const radius = scale / (Math.PI * 2);\n    const coordinates = radius + strokeWidth / 2;\n\n    const viewBoxSize = coordinates * 2;\n    const viewBox = `0 0 ${viewBoxSize} ${viewBoxSize}`;\n\n    return (\n        <section className={wrapperClass}>\n            <svg\n                className=\"circular-progress-circle__chart\"\n                viewBox={viewBox}\n                style={{\n                    '--circle-percentage': percentage,\n                    '--circle-stroke': strokeWidth,\n                    '--circle-scale': scale,\n                    '--circle-animation': animation,\n                }}\n            >\n                <circle\n                    className=\"circle circular-progress-circle__chart--background\"\n                    cy={coordinates}\n                    cx={coordinates}\n                    r={radius}\n                />\n                {showProgress && (\n                    <circle\n                        className=\"circle circular-progress-circle__chart--progress\"\n                        cy={coordinates}\n                        cx={coordinates}\n                        r={radius}\n                    />\n                )}\n            </svg>\n            <h2 className=\"circular-progress-circle__description\">\n                {interpolate(descriptionTemplate, { percentage })}\n            </h2>\n            {children}\n        </section>\n    );\n}\n\nconst { number, bool, string } = PropTypes;\n\nCircularProgress.propTypes = {\n    strokeWidth: number,\n    percentage: number,\n    scale: number,\n    showProgress: bool,\n    descriptionTemplate: string,\n    animation: string,\n};\n\nCircularProgress.defaultProps = {\n    strokeWidth: 1,\n    percentage: 0,\n    scale: 100,\n    showProgress: true,\n    descriptionTemplate: '{percentage}',\n    animation: '',\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../../collapsible-card/jsx/Card';\nimport { UserService } from '../../_data-layer/js/Services/UserService/UserService';\nimport { UserProvider } from '../../_data-layer/jsx/Contexts/UserContext/UserContext';\nimport { useUser } from '../../_data-layer/jsx/Hooks/User/useUser';\nimport CircularProgress from '../../circular-progress/jsx/circular-progress';\nimport interpolate from '../../_global/js/interpolate';\n\nfunction Analytics(props) {\n    const {\n        progressHeading,\n        progressAria,\n        progressLabel,\n        creditsHeading,\n        creditsAria,\n        creditsLabel,\n        scale,\n        goodScoreMessage,\n        strokeWidth,\n        userId,\n    } = props;\n\n    const { user } = useUser();\n    const [title, setTitle] = useState(`Welcome`);\n    const [gpa, setGPA] = useState(0);\n    const [studentCredits, setStudentCredits] = useState(0);\n\n    const date = new Date();\n\n    useEffect(() => {\n        if (user === null) {\n            return;\n        }\n\n        const { firstName, credits, GPA } = user;\n        const hours = date.getHours();\n\n        setGPA(GPA || 0);\n        setStudentCredits(credits || 0);\n\n        let newTitle = ``;\n\n        if (hours < 13) {\n            newTitle = `Good morning`;\n        } else if (hours < 18) {\n            newTitle = `Good afternoon`;\n        } else {\n            newTitle = `Good evening`;\n        }\n\n        if (gpa < 0.7 * scale) {\n            newTitle = `Welcome back`;\n        } else if (gpa > 0.75 * scale) {\n            newTitle = goodScoreMessage;\n        }\n\n        if (date.getDay() === 5) {\n            newTitle = `Happy Friday`;\n        }\n\n        setTitle(`${newTitle}, ${firstName}`);\n    }, [gpa, date, user]);\n\n    return (\n        <Card\n            isCollapsable\n            title={title}\n            contentClasses=\"analytics__container\"\n            id={`card-${userId}`}\n        >\n            <div className=\"analytics__progress-details\">\n                <CircularProgress\n                    animation=\"none\"\n                    percentage={gpa || `/`}\n                    scale={scale}\n                    strokeWidth={strokeWidth}\n                />\n                <div className=\"analytics__progress-description\">\n                    <h4>{progressHeading}</h4>\n                    <span className=\"sr-only\">\n                        {interpolate(progressAria, { gpa, scale })}\n                    </span>\n                    <p aria-hidden>\n                        {interpolate(progressLabel, { gpa, scale })}\n                    </p>\n                </div>\n            </div>\n\n            <div className=\"analytics__progress-details\">\n                <CircularProgress\n                    animation=\"none\"\n                    percentage={studentCredits || `/`}\n                    scale={scale}\n                    strokeWidth={strokeWidth}\n                />\n                <div className=\"analytics__progress-description\">\n                    <h4>{creditsHeading}</h4>\n                    <span className=\"sr-only\">\n                        {interpolate(creditsAria, { studentCredits })}\n                    </span>\n                    <p aria-hidden>\n                        {interpolate(creditsLabel, { studentCredits })}\n                    </p>\n                </div>\n            </div>\n        </Card>\n    );\n}\n\nconst { number, string } = PropTypes;\n\nAnalytics.propTypes = {\n    scale: number,\n    progressHeading: string,\n    progressAria: string,\n    progressLabel: string,\n    creditsHeading: string,\n    creditsAria: string,\n    creditsLabel: string,\n    goodScoreMessage: string,\n    strokeWidth: number,\n};\n\nAnalytics.defaultProps = {\n    scale: 50,\n    progressHeading: 'Total GPA',\n    progressAria: 'You have {gpa} of a possible {scale}',\n    progressLabel: '{gpa}/{scale}',\n    creditsHeading: 'Completed credits',\n    creditsAria: 'You have completed {studentCredits} of your credits',\n    creditsLabel: '{studentCredits} credits',\n    goodScoreMessage: 'Great GPA! keep it up',\n    strokeWidth: 3,\n};\n\nexport default function AnalyticsProvider(props) {\n    const { userAdapter, userId } = props;\n\n    const userService = new UserService({ userAdapter });\n\n    return (\n        <UserProvider userService={userService} userId={userId}>\n            <Analytics {...props} />\n        </UserProvider>\n    );\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n/* eslint-disable import/prefer-default-export */\n\nimport { useContext } from 'react';\nimport { UserContext } from '../../Contexts/UserContext/UserContext';\n\nexport function useUser() {\n    const context = useContext(UserContext);\n    return context;\n}\n"],"names":["UserService","constructor","dto","Error","forEach","name","this","promiseDebouncer","PromiseDebouncer","userAdapter","get","userId","debounce","method","setAll","user","documentId","updateNotifications","notificationKey","toggleNotifications","toggle","requests","Map","key","promiseFactory","keyForComparison","JSON","stringify","has","promise","finally","delete","set","UserProvider","children","userService","isLoading","setIsLoading","useState","isReady","setIsReady","setUser","useEffect","then","response","updateUser","useCallback","id","newUser","result","notifications","UserContext","Provider","value","createContext","Card","props","wrapperClasses","contentClasses","headingIcon","isCollapsable","isInitialCollapsed","isScrollable","subTitle","title","rest","storageId","storageIsCollapsed","localStorage","getItem","isCollapsed","setCollapsed","wrapperClass","join","contentClass","collapseClass","toggleIsCollapsed","setItem","className","type","onClick","href","role","tabIndex","interpolate","template","data","replace","keyExpr","undefined","CircularProgress","strokeWidth","percentage","scale","showProgress","descriptionTemplate","animation","radius","Math","PI","coordinates","viewBoxSize","viewBox","style","cy","cx","r","number","bool","string","PropTypes","Analytics","progressHeading","progressAria","progressLabel","creditsHeading","creditsAria","creditsLabel","goodScoreMessage","useContext","setTitle","gpa","setGPA","studentCredits","setStudentCredits","date","Date","firstName","credits","GPA","hours","getHours","newTitle","getDay","propTypes","defaultProps","AnalyticsProvider"],"sourceRoot":""}