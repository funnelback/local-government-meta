{"version":3,"file":"js/140-a8357f2e54d39888c563.js","mappings":"0OA6De,SAASA,EAAOC,GAC3B,MAAM,GAAEC,EAAF,MAAMC,EAAN,UAAaC,EAAb,WAAwBC,EAAxB,UAAoCC,GAAcL,GAClD,QAAEM,EAAF,cAAWC,IAAkBC,EAAAA,EAAAA,KAE7BC,EAAc,CAACC,EAAGC,KACpBD,EAAEE,iBACFC,SAASC,SAASC,KAAOJ,GAG7B,OAAKL,EAAQF,IAA8C,IAA/BE,EAAQF,GAAYY,OAK5C,uBACIf,GAAE,qBAAgBA,GAClBE,UAAW,CAAC,kCAAmCA,GAAWc,KAAK,KAC/DC,KAAK,YAEL,sBAAIf,UAAU,yCAAyCD,GACtDI,EAAQF,IACLE,EAAQF,GAAYe,KAAI,CAACC,EAAMC,IA9E/C,SAAiBrB,GACb,MAAM,KAAEoB,EAAF,MAAQC,EAAR,YAAeZ,EAAf,cAA4BF,EAA5B,UAA2CF,GAAcL,GACzD,OACFW,EACAW,MAAM,SAAEC,IACRH,EAEJ,OACI,uBACII,IAAKnB,EACLa,KAAK,MACLjB,GAAE,UAAKoB,GACPI,IAAG,wBAAmBJ,GACtB,gBAAed,IAAkBc,EACjClB,UAAU,6CACVuB,QAAUhB,GAAMD,EAAYC,EAAGC,GAC/BgB,UAAYjB,GAAMD,EAAYC,EAAGU,GACjCQ,UAAW,GAEX,sBAAIzB,UAAU,SACToB,EAASM,iBAAmBN,EAASM,gBAAiB,IACtDN,EAASO,gBAAkBP,EAASO,gBAEzC,uBAAK3B,UAAU,UAAUe,KAAK,YACzBK,EAASQ,kBACN,uBAAK5B,UAAU,kCACX,uBAAKA,UAAU,YACX,uBAAKY,KAAK,eAEbQ,EAASQ,iBAAiBC,QAAQ,IAAK,OAI/CT,EAASU,aACN,uBAAK9B,UAAU,kCACX,uBAAKA,UAAU,YACX,uBAAKY,KAAK,YAEd,wBAAMZ,UAAU,WAAhB,gBACCoB,EAASU,aAIjBV,EAASW,aACN,uBAAK/B,UAAU,kCACX,uBAAKA,UAAU,YACX,uBAAKY,KAAK,YAEd,wBAAMZ,UAAU,WAAhB,SACCoB,EAASW,eA8BdC,CAAQ,CACJf,KAAAA,EACAC,MAAAA,EACAZ,YAAAA,EACAF,cAAAA,EACAF,UAAAA,OAjBT,KAwBf,MAAM,OAAE+B,EAAF,OAAUC,EAAV,KAAkBC,GAASC,IAEjCxC,EAAOyC,UAAY,CACfvC,GAAImC,EAAOK,WACXvC,MAAOkC,EACPjC,UAAWiC,EACXhC,WAAYiC,EAAOI,WACnBpC,UAAWiC,EAAKG,YAGpB1C,EAAO2C,aAAe,CAClBxC,MAAO,GACPC,UAAW","sources":["webpack://Plug-and-Play-Template/./src/modules/autocomplete-concierge/jsx/templates/people--v15.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStore } from '../store';\n\nfunction partial(props) {\n    const { data, index, handleClick, selectedIndex, childRefs } = props;\n    const {\n        action,\n        disp: { metaData },\n    } = data;\n\n    return (\n        <div\n            ref={childRefs}\n            role=\"row\"\n            id={`${index}`}\n            key={`result-people-${index}`}\n            aria-selected={selectedIndex === index}\n            className=\"autocomplete-concierge__search-result-item\"\n            onClick={(e) => handleClick(e, action)}\n            onKeyDown={(e) => handleClick(e, data)}\n            tabIndex={-1}\n        >\n            <h3 className=\"title\">\n                {metaData.peopleFirstName && metaData.peopleFirstName}{' '}\n                {metaData.peopleLastName && metaData.peopleLastName}\n            </h3>\n            <div className=\"details\" role=\"gridcell\">\n                {metaData.peopleDepartment && (\n                    <div className=\"autocomplete-results__metadata\">\n                        <svg className=\"svg-icon\">\n                            <use href=\"#building\" />\n                        </svg>\n                        {metaData.peopleDepartment.replace(',', ', ')}\n                    </div>\n                )}\n\n                {metaData.peoplePhone && (\n                    <div className=\"autocomplete-results__metadata\">\n                        <svg className=\"svg-icon\">\n                            <use href=\"#phone\" />\n                        </svg>\n                        <span className=\"sr-only\">Phone number</span>\n                        {metaData.peoplePhone}\n                    </div>\n                )}\n\n                {metaData.peopleEmail && (\n                    <div className=\"autocomplete-results__metadata\">\n                        <svg className=\"svg-icon\">\n                            <use href=\"#email\" />\n                        </svg>\n                        <span className=\"sr-only\">Email</span>\n                        {metaData.peopleEmail}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default function People(props) {\n    const { id, label, className, templateId, childRefs } = props;\n    const { results, selectedIndex } = useStore();\n\n    const handleClick = (e, action) => {\n        e.preventDefault();\n        document.location.href = action;\n    };\n\n    if (!results[templateId] || results[templateId].length === 0) {\n        return null;\n    }\n\n    return (\n        <div\n            id={`result-row-${id}`}\n            className={[`autocomplete-concierge__section`, className].join(' ')}\n            role=\"rowgroup\"\n        >\n            <h2 className=\"autocomplete-concierge__section-title\">{label}</h2>\n            {results[templateId] &&\n                results[templateId].map((data, index) =>\n                    partial({\n                        data,\n                        index,\n                        handleClick,\n                        selectedIndex,\n                        childRefs,\n                    })\n                )}\n        </div>\n    );\n}\n\nconst { string, number, func } = PropTypes;\n\nPeople.propTypes = {\n    id: string.isRequired,\n    label: string,\n    className: string,\n    templateId: number.isRequired,\n    childRefs: func.isRequired,\n};\n\nPeople.defaultProps = {\n    label: ``,\n    className: ``,\n};\n"],"names":["People","props","id","label","className","templateId","childRefs","results","selectedIndex","useStore","handleClick","e","action","preventDefault","document","location","href","length","join","role","map","data","index","disp","metaData","ref","key","onClick","onKeyDown","tabIndex","peopleFirstName","peopleLastName","peopleDepartment","replace","peoplePhone","peopleEmail","partial","string","number","func","PropTypes","propTypes","isRequired","defaultProps"],"sourceRoot":""}