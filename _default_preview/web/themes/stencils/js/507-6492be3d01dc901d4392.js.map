{"version":3,"file":"js/507-6492be3d01dc901d4392.js","mappings":"0OA+De,SAASA,EAAOC,GAC3B,MAAM,GAAEC,EAAF,MAAMC,EAAN,UAAaC,EAAb,WAAwBC,EAAxB,UAAoCC,EAApC,aAA+CC,GAAiBN,GAChE,QAAEO,EAAF,cAAWC,IAAkBC,EAAAA,EAAAA,KAE7BC,EAAc,CAACC,EAAGC,EAAQC,KAC5BF,EAAEG,iBAEFR,EAAaM,EAAQC,GAAO,IAAOE,SAASC,SAASC,KAAOL,KAGhE,OAAKL,EAAQH,IAA8C,IAA/BG,EAAQH,GAAYc,OAK5C,uBACIjB,GAAE,qBAAgBA,GAClBE,UAAW,CAAC,kCAAmCA,GAAWgB,KAAK,KAC/DC,KAAK,YAEL,sBAAIjB,UAAU,yCAAyCD,GACtDK,EAAQH,IACLG,EAAQH,GAAYiB,KAAI,CAACC,EAAMC,IAjF/C,SAAiBvB,GACb,MAAM,KAAEsB,EAAF,MAAQC,EAAR,YAAeb,EAAf,cAA4BF,EAA5B,UAA2CH,GAAcL,GACzD,OACFY,EACAY,MAAM,aAAEC,IACRH,EAEET,EAAQ,GAAH,OAAMY,EAAaC,gBAAnB,YAAsCD,EAAaE,gBAC9D,OACI,uBACIC,IAAKvB,EACLe,KAAK,MACLnB,GAAE,UAAKsB,GACPM,IAAG,wBAAmBN,GACtB,gBAAef,IAAkBe,EACjCpB,UAAU,6CACV2B,QAAUnB,GAAMD,EAAYC,EAAGC,EAAQC,GACvCkB,UAAYpB,GAAMD,EAAYC,EAAGC,EAAQC,GACzCmB,UAAW,GAEX,qBAAGnB,MAAOA,EAAOV,UAAU,QAAQc,KAAML,GACpCC,GAEL,uBAAKV,UAAU,UAAUiB,KAAK,YACzBK,EAAaQ,kBACV,uBAAK9B,UAAU,kCACX,uBAAKA,UAAU,YACX,uBAAKc,KAAK,eAEbQ,EAAaQ,iBACTd,KAAK,KACLe,QAAQ,IAAK,OAIzBT,EAAaU,aACV,uBAAKhC,UAAU,kCACX,uBAAKA,UAAU,YACX,uBAAKc,KAAK,YAEd,wBAAMd,UAAU,WAAhB,gBACCsB,EAAaU,YAAYhB,KAAK,OAItCM,EAAaW,aACV,uBAAKjC,UAAU,kCACX,uBAAKA,UAAU,YACX,uBAAKc,KAAK,YAEd,wBAAMd,UAAU,WAAhB,SACCsB,EAAaW,eA+BlBC,CAAQ,CACJf,KAAAA,EACAC,MAAAA,EACAb,YAAAA,EACAF,cAAAA,EACAH,UAAAA,OAjBT,KAwBf,MAAM,OAAEiC,EAAF,OAAUC,EAAV,KAAkBC,GAASC,IAEjC1C,EAAO2C,UAAY,CACfzC,GAAIqC,EAAOK,WACXzC,MAAOoC,EACPnC,UAAWmC,EACXlC,WAAYmC,EAAOI,WACnBtC,UAAWmC,EAAKG,YAGpB5C,EAAO6C,aAAe,CAClB1C,MAAO,GACPC,UAAW","sources":["webpack://Plug-and-Play-Template/./src/modules/autocomplete-concierge/jsx/templates/people--v16.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStore } from '../store';\n\nfunction partial(props) {\n    const { data, index, handleClick, selectedIndex, childRefs } = props;\n    const {\n        action,\n        disp: { listMetadata },\n    } = data;\n\n    const title = `${listMetadata.peopleFirstName} ${listMetadata.peopleLastName}`;\n    return (\n        <div\n            ref={childRefs}\n            role=\"row\"\n            id={`${index}`}\n            key={`result-people-${index}`}\n            aria-selected={selectedIndex === index}\n            className=\"autocomplete-concierge__search-result-item\"\n            onClick={(e) => handleClick(e, action, title)}\n            onKeyDown={(e) => handleClick(e, action, title)}\n            tabIndex={-1}\n        >\n            <a title={title} className=\"title\" href={action}>\n                {title}\n            </a>\n            <div className=\"details\" role=\"gridcell\">\n                {listMetadata.peopleDepartment && (\n                    <div className=\"autocomplete-results__metadata\">\n                        <svg className=\"svg-icon\">\n                            <use href=\"#building\" />\n                        </svg>\n                        {listMetadata.peopleDepartment\n                            .join(',')\n                            .replace(',', ', ')}\n                    </div>\n                )}\n\n                {listMetadata.peoplePhone && (\n                    <div className=\"autocomplete-results__metadata\">\n                        <svg className=\"svg-icon\">\n                            <use href=\"#phone\" />\n                        </svg>\n                        <span className=\"sr-only\">Phone number</span>\n                        {listMetadata.peoplePhone.join(', ')}\n                    </div>\n                )}\n\n                {listMetadata.peopleEmail && (\n                    <div className=\"autocomplete-results__metadata\">\n                        <svg className=\"svg-icon\">\n                            <use href=\"#email\" />\n                        </svg>\n                        <span className=\"sr-only\">Email</span>\n                        {listMetadata.peopleEmail}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default function People(props) {\n    const { id, label, className, templateId, childRefs, trackedClick } = props;\n    const { results, selectedIndex } = useStore();\n\n    const handleClick = (e, action, title) => {\n        e.preventDefault();\n        // eslint-disable-next-line no-return-assign\n        trackedClick(action, title, () => (document.location.href = action));\n    };\n\n    if (!results[templateId] || results[templateId].length === 0) {\n        return null;\n    }\n\n    return (\n        <div\n            id={`result-row-${id}`}\n            className={[`autocomplete-concierge__section`, className].join(' ')}\n            role=\"rowgroup\"\n        >\n            <h2 className=\"autocomplete-concierge__section-title\">{label}</h2>\n            {results[templateId] &&\n                results[templateId].map((data, index) =>\n                    partial({\n                        data,\n                        index,\n                        handleClick,\n                        selectedIndex,\n                        childRefs,\n                    })\n                )}\n        </div>\n    );\n}\n\nconst { string, number, func } = PropTypes;\n\nPeople.propTypes = {\n    id: string.isRequired,\n    label: string,\n    className: string,\n    templateId: number.isRequired,\n    childRefs: func.isRequired,\n};\n\nPeople.defaultProps = {\n    label: ``,\n    className: ``,\n};\n"],"names":["People","props","id","label","className","templateId","childRefs","trackedClick","results","selectedIndex","useStore","handleClick","e","action","title","preventDefault","document","location","href","length","join","role","map","data","index","disp","listMetadata","peopleFirstName","peopleLastName","ref","key","onClick","onKeyDown","tabIndex","peopleDepartment","replace","peoplePhone","peopleEmail","partial","string","number","func","PropTypes","propTypes","isRequired","defaultProps"],"sourceRoot":""}