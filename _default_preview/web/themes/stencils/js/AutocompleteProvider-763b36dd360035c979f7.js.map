{"version":3,"file":"js/AutocompleteProvider-763b36dd360035c979f7.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/autocomplete-concierge/data/AutocompleteService.js","webpack://Plug-and-Play-Template/./src/modules/autocomplete-concierge/jsx/autocomplete.jsx","webpack://Plug-and-Play-Template/./src/modules/autocomplete-concierge/jsx/reducer.js","webpack://Plug-and-Play-Template/./src/modules/autocomplete-concierge/jsx/store.jsx","webpack://Plug-and-Play-Template/./src/modules/autocomplete-concierge/jsx/templates|lazy|/^\\.\\/.*$/|groupOptions: {}|namespace object"],"sourcesContent":["/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\n/* eslint-disable import/prefer-default-export */\n\nexport class AutocompleteService {\n    constructor(adapters) {\n        if (!adapters || adapters.length === 0) {\n            throw new Error(\n                `At least one adapter is required for AutocompleteService`\n            );\n        }\n\n        this.autocompleteAdapters = [];\n\n        Array.from(adapters).forEach((adapter) => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!adapter || !adapter.hasOwnProperty('autocomplete')) {\n                throw new Error(\n                    `${adapter.constructor.name} is not implemented yet`\n                );\n            } else {\n                this.registerAdapter(adapter);\n            }\n        });\n    }\n\n    registerAdapter(adapter) {\n        this.autocompleteAdapters.push(adapter);\n    }\n\n    /**\n     * Get search results.\n     *\n     * @param {string} args query string.\n     * @param {function} mockFn Unit test mock function.\n     *\n     * @returns {Promise<array>} A promised list of search results.\n     */\n    getResults(args, mockFn) {\n        return Promise.all(\n            this.autocompleteAdapters.map((adapter) =>\n                adapter.getResults(args, mockFn)\n            )\n        )\n            .then((result) => {\n                const mappedResults = [];\n                let resultsCount = 0;\n                let i = 0;\n\n                // Match each result with its template id.\n                result.map(({ data }, idx) => {\n                    resultsCount += data.length;\n                    mappedResults[idx] = [];\n                    if (data.length) {\n                        data.forEach((element) => {\n                            // eslint-disable-next-line no-plusplus\n                            mappedResults[idx][i++] = element;\n                        });\n                    }\n                    return mappedResults;\n                });\n\n                return { results: mappedResults, count: resultsCount };\n            })\n            .catch((error) => {\n                /* eslint-disable no-console */\n                console.error(error);\n                return { results: 0, count: 0, error };\n            });\n    }\n}\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable camelcase */\nimport React, {\n    useState,\n    useEffect,\n    useMemo,\n    Suspense,\n    lazy,\n    useRef,\n    createRef,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { useKeyboard, useFocusWithin } from '@react-aria/interactions';\n\nimport { AutocompleteService } from '../data/AutocompleteService';\nimport { useStore, StoreProvider } from './store';\nimport { initialState, searchReducer } from './reducer';\nimport { useArrayRef, getParam, getTracker } from './helpers';\n\n/**\n * Lazy load result templates. We could not use standard hook to load, as we need to pass array of refs.\n * With memo we caching function but still have ability to rebuild props when refs are changed.\n *\n * @param {object} props Object with props we want to pass into component.\n *\n * @returns {JSX.Element}\n * @constructor\n */\nconst LoadTemplates = (props) => {\n    const { template } = props;\n    const componentName = template.toLowerCase();\n    const DynamicComponent = useMemo(\n        () => lazy(() => import(`./templates/${componentName}`)),\n        []\n    );\n\n    return (\n        <Suspense\n            key={`component-${componentName}`}\n            fallback={<span className=\"sr-only\">Loading component...</span>}\n        >\n            <DynamicComponent {...props} />\n        </Suspense>\n    );\n};\n\nfunction Autocomplete(props) {\n    const {\n        id,\n        templates,\n        placeholder,\n        debounce,\n        action,\n        method,\n        hiddenFields,\n        inputAttributes,\n        showSubmit,\n    } = props;\n\n    const { setSelectedIndex, selectedIndex, count, fetchResults } = useStore();\n\n    const [activeDescendant, setActiveDescendant] = useState(null);\n    const [submit, setSubmit] = useState(null);\n    const [showResults, setShowResults] = useState(null);\n    const [query, setQuery] = useState(``);\n    const [readerAnnounce, setReaderAnnounce] = useState(``);\n    const [isInputFocused, setIsInputFocused] = useState(false);\n\n    const formRef = useRef();\n    const searchBox = createRef();\n    const tracker = getTracker();\n\n    const [elements, childRefs] = useArrayRef();\n\n    const { keyboardProps } = useKeyboard({\n        onKeyUp: (e) => {\n            let index = -1;\n            // ESC\n            if (e.keyCode === 27) {\n                setShowResults(false);\n                setSelectedIndex(-1);\n                return;\n            }\n            // Down\n            if (e.keyCode === 40) {\n                index = selectedIndex + 1 >= count ? 0 : selectedIndex + 1;\n            }\n            // Up\n            if (e.keyCode === 38) {\n                index = selectedIndex - 1 < 0 ? count - 1 : selectedIndex - 1;\n            }\n            // Enter\n            if (e.keyCode === 13) {\n                // Nothing selected and enter hit we will post form.\n                if (selectedIndex === -1) {\n                    setSubmit(true);\n                    return;\n                }\n\n                // We will fire onClick event when enter hit\n                elements[selectedIndex].click();\n            }\n\n            setSelectedIndex(index);\n            setActiveDescendant(index);\n            setShowResults(count > 0);\n        },\n        onKeyDown: (e) => {\n            // This wil prevent moving cursor on input field when press down or up also stop form from being posted when enter pressed.\n            if (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 13) {\n                e.preventDefault();\n            }\n            return false;\n        },\n    });\n\n    // This is to handle clicks outside the combobox.\n    const { focusWithinProps } = useFocusWithin({\n        onFocusWithin: () => {\n            setShowResults(count > 0);\n        },\n        onBlurWithin: () => {\n            setShowResults(false);\n        },\n    });\n\n    // On page load update input field with query string.\n    useEffect(() => {\n        const queryParam = getParam(document.location.href, 'query');\n        setQuery(queryParam || ``);\n    }, []);\n\n    // Let the screen readers know we have or not results.\n    useEffect(() => {\n        setShowResults(count > 0);\n        const message =\n            count > 0\n                ? `${count} results for ${query}`\n                : `No results found for ${query}`;\n\n        setReaderAnnounce(message);\n    }, [count, query]);\n\n    // When query changed we debounce network request.\n    useEffect(() => {\n        const delayDebounceFn = setTimeout(async () => {\n            await fetchResults(query, templates);\n        }, debounce);\n\n        return () => clearTimeout(delayDebounceFn);\n    }, [query]);\n\n    // This is to handle form submissions including tracker.\n    useEffect(() => {\n        if (submit && formRef.current && searchBox.current) {\n            searchBox.current.value = query;\n            if (tracker) {\n                const trackingEvent = {\n                    TYPE: 'SUBMIT',\n                    title: 'NEEDS_REFRESH',\n                    url: window.location.href,\n                    time: Date.now(),\n                };\n                tracker.trackedEventWithCb(\n                    trackingEvent,\n                    formRef.current.submit()\n                );\n                return;\n            }\n\n            formRef.current.submit();\n        }\n    }, [submit]);\n\n    const handleInputOnChange = ({ currentTarget: { value } }) => {\n        setQuery(value);\n    };\n\n    const trackedClick = (url, title, cb) => {\n        if (tracker) {\n            const trackingEvent = {\n                TYPE: 'CLICK',\n                url,\n                query,\n                title,\n            };\n            tracker.trackedEventWithCb(trackingEvent, cb);\n        }\n        if (cb && !tracker) {\n            cb();\n        }\n    };\n\n    // Standard onClick handler, can be overridden within template component if needed.\n    const handleClick = (e, data) => {\n        e.preventDefault();\n\n        // eslint-disable-next-line no-shadow\n        const { action, action_t, title } = data;\n\n        if (action_t === 'Q' || action_t === undefined) {\n            setQuery(action || data);\n            setSubmit(true);\n            return;\n        }\n\n        trackedClick(\n            action,\n            title,\n            // eslint-disable-next-line no-return-assign\n            () => (document.location.href = action)\n        );\n    };\n\n    return (\n        <div className=\"autocomplete-concierge no-wysiwyg\" role=\"search\">\n            <div\n                {...focusWithinProps}\n                role=\"combobox\"\n                aria-expanded={showResults}\n                aria-owns={`${id}-grid`}\n                aria-haspopup=\"grid\"\n                aria-controls={`${id}-input`}\n                id={`${id}-combobox`}\n            >\n                <div className=\"sr-only\" aria-live=\"polite\">\n                    {readerAnnounce}\n                </div>\n                <form\n                    ref={formRef}\n                    action={action}\n                    method={method}\n                    className=\"autocomplete-concierge__form-wrapper\"\n                    {...keyboardProps}\n                >\n                    <label\n                        htmlFor={`${id}-inputField`}\n                        id={`${id}-label`}\n                        className=\"sr-only\"\n                    >\n                        Autocomplete search concierge\n                    </label>\n                    <input\n                        ref={searchBox}\n                        type=\"text\"\n                        id={`${id}-inputField`}\n                        autoComplete=\"off\"\n                        aria-autocomplete=\"list\"\n                        aria-controls={`${id}-grid`}\n                        aria-activedescendant={\n                            activeDescendant === -1\n                                ? undefined\n                                : activeDescendant\n                        }\n                        placeholder={placeholder}\n                        onChange={handleInputOnChange}\n                        onClick={() => setShowResults(count > 0)}\n                        value={query}\n                        className=\"autocomplete-concierge__input\"\n                        name=\"query\"\n                        onBlur={() => {\n                            setTimeout(() => setIsInputFocused(false), 200);\n                        }}\n                        onFocus={() => {\n                            setTimeout(() => setIsInputFocused(true), 200);\n                        }}\n                        {...inputAttributes}\n                    />\n                    {hiddenFields &&\n                        hiddenFields.map((el) => (\n                            <input\n                                key={el.id}\n                                type=\"hidden\"\n                                name={el.name}\n                                value={el.value}\n                            />\n                        ))}\n                    {showSubmit && (\n                        <button\n                            type=\"submit\"\n                            className=\"autocomplete-concierge__submit\"\n                            onClick={() => setSubmit(true)}\n                        >\n                            <svg className=\"svg-icon\">\n                                <title>Submit search</title>\n                                <use href=\"#search\" />\n                            </svg>\n                        </button>\n                    )}\n                </form>\n                <div\n                    {...keyboardProps}\n                    role=\"grid\"\n                    aria-labelledby={`${id}-label`}\n                    id={`${id}-grid`}\n                    className={[\n                        `autocomplete-concierge__results`,\n                        (!isInputFocused || !showResults) && `hidden`,\n                    ].join(' ')}\n                    tabIndex={-1}\n                >\n                    {templates &&\n                        templates.map((el, templateId) =>\n                            LoadTemplates({\n                                ...el,\n                                templateId,\n                                handleClick,\n                                trackedClick,\n                                childRefs,\n                            })\n                        )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default function AutocompleteProvider(props) {\n    const { adapters } = props;\n    const autocompleteService = new AutocompleteService(adapters);\n\n    return (\n        <StoreProvider\n            initialState={initialState}\n            reducer={searchReducer}\n            autocompleteService={autocompleteService}\n        >\n            <Autocomplete {...props} />\n        </StoreProvider>\n    );\n}\n\nconst { string, arrayOf, shape, number, bool } = PropTypes;\n\nAutocomplete.propTypes = {\n    id: string,\n    templates: arrayOf(\n        shape({\n            id: string,\n            label: string,\n            template: string,\n            serviceUrl: string,\n            params: string,\n        })\n    ).isRequired,\n    placeholder: string,\n    debounce: number,\n    action: string,\n    method: string,\n    showSubmit: bool,\n};\n\nAutocomplete.defaultProps = {\n    id: 'autocomplete-search',\n    placeholder: 'Start your search here...',\n    debounce: 500,\n    action: 'search.html',\n    method: 'GET',\n    showSubmit: true,\n};\n","/* eslint-disable no-console */\n\nexport const UPDATE_QUERY = 'PNP/AUTOCOMPLETE/UPDATE_QUERY';\nexport const UPDATE_RESULTS = 'PNP/AUTOCOMPLETE/UPDATE_RESULTS';\nexport const SET_SELECTED = 'PNP/AUTOCOMPLETE/SET_SELECTED';\n\nexport const initialState = {\n    results: [],\n    count: 0,\n    query: ``,\n    selectedIndex: -1,\n};\n\nexport const searchReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case UPDATE_RESULTS:\n            return {\n                ...state,\n                results: action.results,\n                count: action.count,\n                query: action.query,\n                selectedIndex: -1,\n            };\n        case SET_SELECTED:\n            return {\n                ...state,\n                selectedIndex: action.selectedIndex,\n            };\n        default:\n            return { ...state };\n    }\n};\n\nexport const autocompleteContext = (dispatch, service) => ({\n    updateResults: (results, count) => {\n        dispatch({\n            type: UPDATE_RESULTS,\n            results,\n            count,\n        });\n    },\n    setSelectedIndex: (selectedIndex) => {\n        dispatch({\n            type: SET_SELECTED,\n            selectedIndex,\n        });\n    },\n    fetchResults: async (query) => {\n        if (!query) {\n            dispatch({\n                type: UPDATE_RESULTS,\n                results: [],\n                count: 0,\n            });\n            return;\n        }\n\n        const { results, count, error } = await service.getResults(query);\n\n        if (error) {\n            console.error(\n                `There was an error fetching results from the service.`\n            );\n            console.info(error.message);\n\n            dispatch({\n                type: UPDATE_RESULTS,\n                results: [],\n                count: 0,\n            });\n            return;\n        }\n\n        dispatch({\n            type: UPDATE_RESULTS,\n            results,\n            count,\n            query,\n        });\n    },\n});\n","import React, { useReducer, useContext, createContext, useMemo } from 'react';\nimport { autocompleteContext } from './reducer';\n\nconst Store = createContext();\n\nStore.displayName = 'PNP-STORE';\n\nexport const useStore = () => useContext(Store);\n\nexport const StoreProvider = ({\n    children,\n    initialState,\n    reducer,\n    autocompleteService,\n}) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const autocomplete = useMemo(\n        () => autocompleteContext(dispatch, autocompleteService),\n        []\n    );\n\n    return (\n        <Store.Provider value={{ ...autocomplete, dispatch, ...state }}>\n            {children}\n        </Store.Provider>\n    );\n};\n","var map = {\n\t\"./organic\": [\n\t\t44113,\n\t\t113\n\t],\n\t\"./organic.jsx\": [\n\t\t44113,\n\t\t113\n\t],\n\t\"./people--v15\": [\n\t\t62140,\n\t\t140\n\t],\n\t\"./people--v15.jsx\": [\n\t\t62140,\n\t\t140\n\t],\n\t\"./people--v16\": [\n\t\t12507,\n\t\t507\n\t],\n\t\"./people--v16.jsx\": [\n\t\t12507,\n\t\t507\n\t],\n\t\"./programs--v15\": [\n\t\t53700,\n\t\t588\n\t],\n\t\"./programs--v15.jsx\": [\n\t\t53700,\n\t\t588\n\t],\n\t\"./programs--v16\": [\n\t\t32723,\n\t\t723\n\t],\n\t\"./programs--v16.jsx\": [\n\t\t32723,\n\t\t723\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 42276;\nmodule.exports = webpackAsyncContext;"],"names":["AutocompleteService","constructor","adapters","length","Error","this","autocompleteAdapters","Array","from","forEach","adapter","hasOwnProperty","name","registerAdapter","push","getResults","args","mockFn","Promise","all","map","then","result","mappedResults","resultsCount","i","idx","data","element","results","count","catch","error","console","Autocomplete","props","id","templates","placeholder","debounce","action","method","hiddenFields","inputAttributes","showSubmit","setSelectedIndex","selectedIndex","fetchResults","useStore","activeDescendant","setActiveDescendant","useState","submit","setSubmit","showResults","setShowResults","query","setQuery","readerAnnounce","setReaderAnnounce","isInputFocused","setIsInputFocused","formRef","useRef","searchBox","createRef","tracker","getTracker","elements","childRefs","useArrayRef","keyboardProps","useKeyboard","onKeyUp","e","index","keyCode","click","onKeyDown","preventDefault","focusWithinProps","useFocusWithin","onFocusWithin","onBlurWithin","useEffect","queryParam","getParam","document","location","href","message","delayDebounceFn","setTimeout","async","clearTimeout","current","value","trackingEvent","TYPE","title","url","window","time","Date","now","trackedEventWithCb","trackedClick","cb","handleClick","action_t","undefined","className","role","ref","htmlFor","type","autoComplete","onChange","currentTarget","onClick","onBlur","onFocus","el","key","join","tabIndex","templateId","template","componentName","toLowerCase","DynamicComponent","useMemo","lazy","Suspense","fallback","LoadTemplates","AutocompleteProvider","autocompleteService","initialState","reducer","searchReducer","string","arrayOf","shape","number","bool","PropTypes","propTypes","label","serviceUrl","params","isRequired","defaultProps","UPDATE_RESULTS","SET_SELECTED","state","autocompleteContext","dispatch","service","updateResults","info","Store","createContext","displayName","useContext","StoreProvider","children","useReducer","autocomplete","Provider","webpackAsyncContext","req","__webpack_require__","o","resolve","code","ids","keys","Object","module","exports"],"sourceRoot":""}