{"version":3,"file":"js/81-4ad673166a17ce1028ad.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/collapsible-card/jsx/Card.jsx","webpack://Plug-and-Play-Template/./src/modules/collapsible/jsx/Collapsible.jsx","webpack://Plug-and-Play-Template/./src/modules/_global/js/splitArrayAtPoint.js","webpack://Plug-and-Play-Template/./src/modules/_global/js/formatBytes.js","webpack://Plug-and-Play-Template/./src/modules/edify-courses/jsx/CourseContent.jsx","webpack://Plug-and-Play-Template/./src/modules/edify-courses/jsx/CourseList.jsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useCallback, useState } from 'react';\n\nexport default function Card(props) {\n    const {\n        wrapperClasses,\n        contentClasses,\n        children,\n        id,\n        headingIcon,\n        isCollapsable,\n        isInitialCollapsed,\n        isScrollable,\n        subTitle,\n        title,\n        ...rest\n    } = props;\n\n    let storageId = ``;\n\n    if (id) {\n        storageId = `ComponentCard-${id}`;\n    }\n\n    let storageIsCollapsed = isInitialCollapsed || false;\n    if (storageId) {\n        storageIsCollapsed = localStorage.getItem(storageId) === `collapsed`;\n    }\n\n    const [isCollapsed, setCollapsed] = useState(storageIsCollapsed);\n\n    const wrapperClass = [\n        'collapsable-card',\n        'no-wysiwyg',\n        wrapperClasses,\n    ].join(' ');\n    const contentClass = [\n        'collapsable-card__contents',\n        contentClasses,\n        isScrollable && 'collapsable-card--scrollable',\n    ].join(' ');\n    const collapseClass = [\n        'svg-icon',\n        isCollapsed === false && 'collapsable-card__collapsed',\n    ].join(' ');\n\n    const toggleIsCollapsed = useCallback(() => {\n        setCollapsed(!isCollapsed);\n\n        if (storageId) {\n            localStorage.setItem(storageId, !isCollapsed ? `collapsed` : ``);\n        }\n    }, [storageId, isCollapsed]);\n\n    return (\n        <div className={wrapperClass} id={id} {...rest}>\n            <div className=\"collapsable-card__header\">\n                <h2 className=\"collapsable-card__header-text\">{title}</h2>\n                <div className=\"collapsable-card__header-right\">\n                    {subTitle && (\n                        <h3 className=\"collapsable-card__header-text collapsable-card__header-text--sub-title\">\n                            {subTitle}\n                        </h3>\n                    )}\n                    {isCollapsable && (\n                        <button\n                            type=\"button\"\n                            onClick={toggleIsCollapsed}\n                            className=\"collapsable-card__more-menu-button\"\n                            aria-expanded={!isCollapsed}\n                            aria-controls={`content-${id}`}\n                        >\n                            <svg className={collapseClass}>\n                                <title>\n                                    {isCollapsed\n                                        ? `Expand panel`\n                                        : `Collapse panel`}\n                                </title>\n                                <use href=\"#chevron\" />\n                            </svg>\n                        </button>\n                    )}\n                    {headingIcon}\n                </div>\n            </div>\n            {(isCollapsable !== true ||\n                (isCollapsable === true && isCollapsed === false)) && (\n                <div\n                    className={contentClass}\n                    id={`content-${id}`}\n                    role=\"region\"\n                    tabIndex={-1}\n                >\n                    {children}\n                </div>\n            )}\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Collapsible({\n    collapsedTitle,\n    expandedTitle,\n    isOpen,\n    shouldAnimate,\n    children,\n    displayChevron,\n    additionalButtonClasses,\n    additionalContentClasses,\n}) {\n    // Is collapsed should be the oppisite of is Open prop\n    const [isCollapsed, setIsCollapsed] = useState(!isOpen);\n    const [isAnimating, setIsAnimating] = useState(false);\n\n    // Handle the click and animation if the prop is set\n    function handleClick() {\n        if (!shouldAnimate) {\n            setIsCollapsed(!isCollapsed);\n        } else {\n            setIsAnimating(true);\n        }\n    }\n\n    // Handle the animation\n    function handleAnimationEnd() {\n        if (isAnimating) {\n            setIsAnimating(false);\n            setIsCollapsed(!isCollapsed);\n        }\n    }\n\n    function getContentClasses() {\n        const classes = ['react-collapse__content', additionalContentClasses];\n        if (isCollapsed && isAnimating) {\n            classes.push('react-collapse__content--expanding');\n        }\n        if (!isCollapsed && isAnimating) {\n            classes.push('react-collapse__content--collapsing');\n        }\n        if (!isCollapsed) {\n            classes.push('react-collapse__content--open');\n        }\n        return classes.join(' ');\n    }\n\n    return (\n        <>\n            <button\n                type=\"button\"\n                onClick={handleClick}\n                aria-expanded={!isCollapsed}\n                className={`react-collapse__button${\n                    additionalButtonClasses ? ` ${additionalButtonClasses}` : ''\n                }\n                ${!isCollapsed ? 'react-collapse__button--open' : ''}`}\n            >\n                {displayChevron && (\n                    <span\n                        className={`react-collapse__chevron ${\n                            isCollapsed\n                                ? 'react-collapse__chevron--up'\n                                : 'react-collapse__chevron--down'\n                        }`}\n                    >\n                        <svg className=\"svg-icon\">\n                            <use xlinkHref=\"#chevron\" />\n                            <title>Chevron</title>\n                        </svg>\n                    </span>\n                )}\n                {isCollapsed ? collapsedTitle : expandedTitle || collapsedTitle}\n            </button>\n            <div\n                className={getContentClasses()}\n                onTransitionEnd={handleAnimationEnd()}\n            >\n                {children}\n            </div>\n        </>\n    );\n}\n\nCollapsible.propTypes = {\n    collapsedTitle: PropTypes.string,\n    expandedTitle: PropTypes.string,\n    isOpen: PropTypes.bool,\n    shouldAnimate: PropTypes.bool,\n    children: PropTypes.node,\n};\n\nCollapsible.defaultProps = {\n    collapsedTitle: 'Title',\n    expandedTitle: 'Title',\n    isOpen: true,\n    shouldAnimate: false,\n    children:\n        'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Unde repudiandae distinctio voluptatum laborum quod, quisquam corrupti pariatur possimus totam adipisci est soluta, aut, quos magni. Aspernatur velit perferendis et incidunt.',\n};\n","/**\n * Function that splits an array into an array of arrays at a given point.\n * @param {Array} array - The array to split.\n * @param {number} point - The point at which to split the array.\n * @returns {Array} The array of arrays.\n */\nfunction splitArrayAtPoint(array, point) {\n    // If the point isn't an integer, return an error.\n    if (typeof point !== 'number' || !Number.isInteger(point)) {\n        throw new Error('The point must be an integer.');\n    }\n\n    // If the array isn't an array, return an error.\n    if (!Array.isArray(array)) {\n        throw new Error('The array must be an array.');\n    }\n\n    // If the array is empty, return an error.\n    if (array.length === 0) {\n        throw new Error('The array must not be empty.');\n    }\n\n    // If the point is greater than the array lenth, return the array and an empty array.\n    if (point >= array.length) {\n        return [array, []];\n    }\n\n    // Split the array into two arrays.\n    return [array.slice(0, point), array.slice(point)];\n}\n\nexport default splitArrayAtPoint;\n","/**\n * Funtion that takes a size in bytes and formats it in a human redable way (e.g 200MB etc)\n * @param {int} bytes - The size in bytes\n * @returns {string} - The formatted size as a string\n */\nfunction formatBytes(bytes) {\n    // Check that bytes is a number\n    if (bytes === undefined || typeof bytes !== 'number') {\n        throw new Error('Please ensure that bytes is passed as a number');\n    }\n\n    // Define our sizes\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\n    // Catch statement\n    if (bytes === 0) {\n        return '0 Bytes';\n    }\n\n    // Check how many lots of 1024 bytes we are dealing with\n    const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10);\n\n    // Return our formatted string\n    return `${Math.round(bytes / 1024 ** i, 2)} ${sizes[i]}`;\n}\n\nexport default formatBytes;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Collapsible from '../../collapsible/jsx/Collapsible';\nimport splitArrayAtPoint from '../../_global/js/splitArrayAtPoint';\nimport formatBytes from '../../_global/js/formatBytes';\n\nfunction Assessment({ name, due }) {\n    // Make sure the data is a date object\n    const dateObj = new Date(due);\n\n    return (\n        <div className=\"my-courses__assessment-item\">\n            <div className=\"my-courses__assessment-name\">{name}</div>\n            <div className=\"my-courses__assessment-due\">\n                {/* Display the due date as MMM D */}\n                {dateObj.toLocaleDateString('en-US', {\n                    month: 'short',\n                    day: 'numeric',\n                })}\n            </div>\n        </div>\n    );\n}\n\nAssessment.propTypes = {\n    name: PropTypes.string.isRequired,\n    due: PropTypes.instanceOf(Date).isRequired,\n};\n\nfunction Update({ name, date, link, fileSize }) {\n    // Make sure the data is a date object\n    const dateObj = new Date(date);\n\n    return (\n        <div className=\"my-courses__update-item\">\n            <div className=\"my-courses__update-icon\">\n                <svg className=\"svg-icon\">\n                    <use href=\"#attachment\" />\n                    <title>Attachment icon</title>\n                </svg>\n            </div>\n            <div className=\"my-courses__update-name\">\n                {name} ({formatBytes(fileSize)}){' '}\n                <a className=\"my-courses__update-link\" href={link}>\n                    Download\n                </a>\n            </div>\n            <div className=\"my-courses__update-date\">\n                {/* Display the date as MMM D */}\n                {dateObj.toLocaleDateString('en-US', {\n                    month: 'short',\n                    day: 'numeric',\n                })}\n            </div>\n        </div>\n    );\n}\n\nUpdate.propTypes = {\n    name: PropTypes.string.isRequired,\n    date: PropTypes.instanceOf(Date).isRequired,\n    link: PropTypes.string.isRequired,\n};\n\nexport default function CourseContent({ assessments, updates }) {\n    // Split the assements into the first 4 and the rest\n    const [visibleAssessments, restAssessments] = splitArrayAtPoint(\n        assessments,\n        4\n    );\n\n    // Split the updates into the first 4 and the rest\n    const [visibleUpdates, restUpdates] = splitArrayAtPoint(updates, 4);\n\n    return (\n        <>\n            <div className=\"my-courses__assessments\">\n                <div className=\"my-courses__assessments-title-wrapper\">\n                    <div className=\"my-courses__assessments-icon\">\n                        <svg className=\"svg-icon\">\n                            <use href=\"#edit\" />\n                            <title>Edit icon</title>\n                        </svg>\n                    </div>\n                    <div className=\"my-courses__assessments-title\">\n                        Assignments & Assessments\n                    </div>\n                    <div className=\"my-courses__assessments-column-heading\">\n                        Due Date\n                    </div>\n                </div>\n                {visibleAssessments.map((assessment) => {\n                    const { id, name, due } = assessment;\n\n                    return <Assessment key={id} name={name} due={due} />;\n                })}\n                {restAssessments.length > 0 && (\n                    <Collapsible\n                        displayChevron\n                        title=\"Show more\"\n                        isOpen={false}\n                        additionalButtonClasses=\"my-courses__show-more-button\"\n                        additionalContentClasses=\"my-courses__show-more-content\"\n                    >\n                        {restAssessments.map((assessment) => {\n                            const { id, name, due } = assessment;\n\n                            return (\n                                <Assessment key={id} name={name} due={due} />\n                            );\n                        })}\n                    </Collapsible>\n                )}\n            </div>\n            <div className=\"my-courses__updates\">\n                <div className=\"my-courses__updates-title-wrapper\">\n                    <div className=\"my-courses__updates-title\">\n                        Course updates\n                    </div>\n                    <div className=\"my-courses__updates-column-heading\">\n                        Date\n                    </div>\n                </div>\n                {visibleUpdates.map((update) => {\n                    const { id, name, date, link, fileSize } = update;\n\n                    return (\n                        <Update\n                            key={id}\n                            name={name}\n                            date={date}\n                            link={link}\n                            fileSize={fileSize}\n                        />\n                    );\n                })}\n                {restUpdates.length > 0 && (\n                    <Collapsible\n                        displayChevron\n                        collapsedTitle=\"Show more\"\n                        expandedTitle=\"Show less\"\n                        isOpen={false}\n                        additionalButtonClasses=\"my-courses__show-more-button\"\n                        additionalContentClasses=\"my-courses__show-more-content\"\n                    >\n                        {restUpdates.map((update) => {\n                            const { id, name, date, link, fileSize } = update;\n\n                            return (\n                                <Update\n                                    key={id}\n                                    name={name}\n                                    date={date}\n                                    link={link}\n                                    fileSize={fileSize}\n                                />\n                            );\n                        })}\n                    </Collapsible>\n                )}\n            </div>\n            <div className=\"my-courses__footer\">\n                <a className=\"my-courses__footer-link\" href=\"#\">\n                    Download syllabus\n                </a>\n                <a className=\"my-courses__footer-button--light\" href=\"#\">\n                    <svg className=\"svg-icon\">\n                        <use href=\"#download\" />\n                        <title>Download icon</title>\n                    </svg>\n                    Syllabus\n                </a>\n                <a className=\"my-courses__footer-button\" href=\"#\">\n                    <svg className=\"svg-icon\">\n                        <use href=\"#external\" />\n                        <title>External icon</title>\n                    </svg>\n                    Canvas\n                </a>\n            </div>\n        </>\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useContext, useEffect } from 'react';\n// Data layer imports\nimport CourseContext from './data/CourseContext';\n\nimport Card from '../../collapsible-card/jsx/Card';\nimport CourseContent from './CourseContent';\n\nexport default function CourseListContent() {\n    const { courses, getCourses } = useContext(CourseContext);\n\n    // Initial data load\n    useEffect(() => {\n        getCourses({});\n    }, []);\n\n    // Check that we have courses to display\n    if (courses.length === 0) {\n        return (\n            <div className=\"my-courses\">\n                <div className=\"my-courses__title\">My courses</div>\n                <div className=\"my-courses__empty-container\">\n                    <div className=\"my-courses__empty-content\">\n                        <div className=\"my-courses__svg-wrapper\">\n                            <svg className=\"svg-icon\">\n                                <use href=\"#no-courses\" />\n                                <title>Empty box icon</title>\n                            </svg>\n                        </div>\n                        <div className=\"my-courses__empty-text\">\n                            <b>No courses added</b>\n                            <br />\n                            Contact your administrator\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div className=\"my-courses\">\n            <div className=\"my-courses__title\">My courses</div>\n            {\n                // Loop through each of the courses and create a card for each\n                courses &&\n                    courses.map((course, index) => {\n                        console.log(course);\n                        const { code, name, assessments, updates } = course;\n\n                        console.log(code, course.assessments);\n\n                        return (\n                            <Card\n                                isCollapsable\n                                isInitialCollapsed={index !== 0}\n                                key={course.id}\n                                title={`${code} | ${name}`}\n                                wrapperClasses=\"my-courses__card\"\n                                contentClasses=\"my-courses__content\"\n                            >\n                                <CourseContent\n                                    assessments={assessments}\n                                    updates={updates}\n                                />\n                            </Card>\n                        );\n                    })\n            }\n        </div>\n    );\n}\n"],"names":["Card","props","wrapperClasses","contentClasses","children","id","headingIcon","isCollapsable","isInitialCollapsed","isScrollable","subTitle","title","rest","storageId","storageIsCollapsed","localStorage","getItem","isCollapsed","setCollapsed","useState","wrapperClass","join","contentClass","collapseClass","toggleIsCollapsed","useCallback","setItem","className","type","onClick","href","role","tabIndex","Collapsible","collapsedTitle","expandedTitle","isOpen","shouldAnimate","displayChevron","additionalButtonClasses","additionalContentClasses","setIsCollapsed","isAnimating","setIsAnimating","xlinkHref","classes","push","getContentClasses","onTransitionEnd","propTypes","PropTypes","defaultProps","array","point","Number","isInteger","Error","Array","isArray","length","slice","bytes","undefined","i","parseInt","Math","floor","log","round","Assessment","name","due","dateObj","Date","toLocaleDateString","month","day","Update","date","link","fileSize","formatBytes","CourseContent","assessments","updates","visibleAssessments","restAssessments","splitArrayAtPoint","visibleUpdates","restUpdates","map","assessment","key","update","CourseListContent","courses","getCourses","useContext","CourseContext","useEffect","course","index","console","code","isRequired"],"sourceRoot":""}