{"version":3,"file":"js/AnalyticsProvider-19905e1dfd60a5633ac3.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/collapsible-card/jsx/Card.jsx","webpack://Plug-and-Play-Template/./src/modules/_global/js/interpolate.js","webpack://Plug-and-Play-Template/./src/modules/circular-progress/jsx/circular-progress.jsx","webpack://Plug-and-Play-Template/./src/modules/edify-GPA/jsx/analytics.jsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useCallback, useState } from 'react';\n\nexport default function Card(props) {\n    const {\n        wrapperClasses,\n        contentClasses,\n        children,\n        id,\n        headingIcon,\n        isCollapsable,\n        isInitialCollapsed,\n        isScrollable,\n        subTitle,\n        title,\n        ...rest\n    } = props;\n\n    let storageId = ``;\n\n    if (id) {\n        storageId = `ComponentCard-${id}`;\n    }\n\n    let storageIsCollapsed = isInitialCollapsed || false;\n    if (storageId) {\n        storageIsCollapsed = localStorage.getItem(storageId) === `collapsed`;\n    }\n\n    const [isCollapsed, setCollapsed] = useState(storageIsCollapsed);\n\n    const wrapperClass = [\n        'collapsable-card',\n        'no-wysiwyg',\n        wrapperClasses,\n    ].join(' ');\n    const contentClass = [\n        'collapsable-card__contents',\n        contentClasses,\n        isScrollable && 'collapsable-card--scrollable',\n    ].join(' ');\n    const collapseClass = [\n        'svg-icon',\n        isCollapsed === false && 'collapsable-card__collapsed',\n    ].join(' ');\n\n    const toggleIsCollapsed = useCallback(() => {\n        setCollapsed(!isCollapsed);\n\n        if (storageId) {\n            localStorage.setItem(storageId, !isCollapsed ? `collapsed` : ``);\n        }\n    }, [storageId, isCollapsed]);\n\n    return (\n        <div className={wrapperClass} id={id} {...rest}>\n            <button\n                className=\"collapsable-card__header\"\n                type=\"button\"\n                onClick={toggleIsCollapsed}\n                aria-expanded={!isCollapsed}\n                aria-controls={`content-${id}`}\n            >\n                <h2 className=\"collapsable-card__header-text\">{title}</h2>\n                <div className=\"collapsable-card__header-right\">\n                    {subTitle && (\n                        <h3 className=\"collapsable-card__header-text collapsable-card__header-text--sub-title\">\n                            {subTitle}\n                        </h3>\n                    )}\n                    {isCollapsable && (\n                        <svg\n                            className={`${collapseClass} collapsable-card__more-menu-icon`}\n                        >\n                            <title>\n                                {isCollapsed\n                                    ? `Expand panel`\n                                    : `Collapse panel`}\n                            </title>\n                            <use href=\"#chevron\" />\n                        </svg>\n                    )}\n                    {headingIcon}\n                </div>\n            </button>\n            {(isCollapsable !== true ||\n                (isCollapsable === true && isCollapsed === false)) && (\n                <div\n                    className={contentClass}\n                    id={`content-${id}`}\n                    role=\"region\"\n                    tabIndex={-1}\n                >\n                    {children}\n                </div>\n            )}\n        </div>\n    );\n}\n","/**\n * Replace strings in given mustache template.\n *\n * @param {string} template Template string.\n * @param {object} data Data to be replaced.\n *\n * @returns {string}\n */\nexport default function interpolate(template, data) {\n    const interpolated = template.replace(/{([^{}]+)}/g, (keyExpr, key) =>\n        data[key] !== undefined ? `${data[key]}` : ``\n    );\n\n    return interpolated;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport interpolate from '../../_global/js/interpolate';\n\nexport default function CircularProgress({\n    strokeWidth,\n    percentage,\n    scale,\n    showProgress,\n    wrapperClasses,\n    descriptionTemplate,\n    animation,\n    children,\n}) {\n    const wrapperClass = [\n        'circular-progress-circle',\n        'circular-progress-circle__container',\n        wrapperClasses,\n    ].join(' ');\n\n    // We use 100 here so that the circumfrance of the circle is 100 making it easier to work with the stroke dash array\n    const radius = 100 / (Math.PI * 2);\n    const diameter = radius * 2;\n    // Get the size by finding the diameter plus both stroke widths (Left and Right / Top and Bottom)\n    const viewBoxSize = diameter + 2 * strokeWidth;\n    // Put the circles in the middle of the viewbox\n    const coordinates = viewBoxSize / 2;\n    // Set our viewbox\n    const viewBox = `0 0 ${viewBoxSize} ${viewBoxSize}`;\n    // Caculate the actual percentage\n    let percentageCaculated;\n    // Percentage can be a string on initial load of a component\n    if (typeof percentage !== 'number') {\n        percentageCaculated = 0;\n    } else {\n        percentageCaculated = (percentage / scale) * 100;\n    }\n\n    return (\n        <section className={wrapperClass}>\n            <svg\n                className=\"circular-progress-circle__chart\"\n                viewBox={viewBox}\n                style={{\n                    '--circle-percentage': percentageCaculated,\n                    '--circle-stroke': strokeWidth,\n                    '--circle-scale': 100,\n                    '--circle-animation': animation,\n                }}\n            >\n                <circle\n                    className=\"circle circular-progress-circle__chart--background\"\n                    cy={coordinates}\n                    cx={coordinates}\n                    r={radius}\n                />\n                {showProgress && (\n                    <circle\n                        className=\"circle circular-progress-circle__chart--progress\"\n                        cy={coordinates}\n                        cx={coordinates}\n                        r={radius}\n                    />\n                )}\n            </svg>\n            <h2 className=\"circular-progress-circle__description\">\n                {interpolate(descriptionTemplate, { percentage, scale })}\n            </h2>\n            {children}\n        </section>\n    );\n}\n\nconst { number, bool, string, oneOfType } = PropTypes;\n\nCircularProgress.propTypes = {\n    strokeWidth: number,\n    percentage: oneOfType([number, string]),\n    scale: number,\n    showProgress: bool,\n    descriptionTemplate: string,\n    animation: string,\n};\n\nCircularProgress.defaultProps = {\n    strokeWidth: 1,\n    percentage: 0,\n    scale: 100,\n    showProgress: true,\n    descriptionTemplate: '{percentage}',\n    animation: '',\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../../collapsible-card/jsx/Card';\nimport CircularProgress from '../../circular-progress/jsx/circular-progress';\nimport interpolate from '../../_global/js/interpolate';\nimport GpaContext from './data/GpaContext';\n\nexport default function Analytics({\n    progressHeading,\n    progressAria,\n    progressLabel,\n    creditsHeading,\n    creditsAria,\n    creditsLabel,\n    gpaScale,\n    creditsScale,\n    goodScoreMessage,\n    strokeWidth,\n}) {\n    // Get our data from the context\n    const { user, gpa, creditsCompleted, getData } = useContext(GpaContext);\n\n    // State for the title is contained internally\n    const [title, setTitle] = useState('');\n\n    const date = new Date();\n\n    useEffect(() => {\n        // Get the initial values\n        getData();\n\n        const hours = date.getHours();\n\n        let newTitle = ``;\n\n        if (hours < 13) {\n            newTitle = `Good morning`;\n        } else if (hours < 18) {\n            newTitle = `Good afternoon`;\n        } else {\n            newTitle = `Good evening`;\n        }\n\n        if (gpa < 0.7 * gpaScale) {\n            newTitle = `Welcome back`;\n        } else if (gpa > 0.75 * gpaScale) {\n            newTitle = goodScoreMessage;\n        }\n\n        if (date.getDay() === 5) {\n            newTitle = `Happy Friday`;\n        }\n\n        setTitle(`${newTitle}, ${user}`);\n    }, [user, gpa, creditsCompleted]);\n\n    return (\n        <Card\n            isCollapsable\n            title={title}\n            contentClasses=\"analytics__container\"\n            id={`card-${user}`}\n        >\n            <div className=\"analytics__progress-details\">\n                <CircularProgress\n                    animation=\"none\"\n                    percentage={gpa || '/'}\n                    scale={gpaScale}\n                    strokeWidth={strokeWidth}\n                />\n                <div className=\"analytics__progress-description\">\n                    <h4>{progressHeading}</h4>\n                    <span className=\"sr-only\">\n                        {interpolate(progressAria, { gpa, gpaScale })}\n                    </span>\n                    <p aria-hidden>\n                        {interpolate(progressLabel, { gpa, gpaScale })}\n                    </p>\n                </div>\n            </div>\n\n            <div className=\"analytics__progress-details\">\n                <CircularProgress\n                    animation=\"none\"\n                    percentage={creditsCompleted || `/`}\n                    scale={creditsScale}\n                    strokeWidth={strokeWidth}\n                />\n                <div className=\"analytics__progress-description\">\n                    <h4>{creditsHeading}</h4>\n                    <span className=\"sr-only\">\n                        {interpolate(creditsAria, { creditsCompleted })}\n                    </span>\n                    <p aria-hidden>\n                        {interpolate(creditsLabel, { creditsCompleted })}\n                    </p>\n                </div>\n            </div>\n        </Card>\n    );\n}\n\nconst { number, string } = PropTypes;\n\nAnalytics.propTypes = {\n    gpaScale: number,\n    creditsScale: number,\n    progressHeading: string,\n    progressAria: string,\n    progressLabel: string,\n    creditsHeading: string,\n    creditsAria: string,\n    creditsLabel: string,\n    goodScoreMessage: string,\n    strokeWidth: number,\n};\n\nAnalytics.defaultProps = {\n    gpaScale: 7,\n    creditsScale: 96,\n    progressHeading: 'Total GPA',\n    progressAria: 'You have {gpa} of a possible {gpaScale}',\n    progressLabel: '{gpa}/{gpaScale}',\n    creditsHeading: 'Completed credits',\n    creditsAria: 'You have completed {studentCredits} of your credits',\n    creditsLabel: '{studentCredits} credits',\n    goodScoreMessage: 'Great GPA! keep it up',\n    strokeWidth: 3,\n};\n"],"names":["Card","props","wrapperClasses","contentClasses","children","id","headingIcon","isCollapsable","isInitialCollapsed","isScrollable","subTitle","title","rest","storageId","storageIsCollapsed","localStorage","getItem","isCollapsed","setCollapsed","useState","wrapperClass","join","contentClass","collapseClass","toggleIsCollapsed","useCallback","setItem","className","type","onClick","href","role","tabIndex","interpolate","template","data","replace","keyExpr","key","undefined","CircularProgress","strokeWidth","percentage","scale","showProgress","descriptionTemplate","animation","radius","Math","PI","viewBoxSize","coordinates","viewBox","percentageCaculated","style","cy","cx","r","number","bool","string","oneOfType","PropTypes","propTypes","defaultProps","Analytics","progressHeading","progressAria","progressLabel","creditsHeading","creditsAria","creditsLabel","gpaScale","creditsScale","goodScoreMessage","user","gpa","creditsCompleted","getData","useContext","GpaContext","setTitle","date","Date","useEffect","hours","getHours","newTitle","getDay"],"sourceRoot":""}