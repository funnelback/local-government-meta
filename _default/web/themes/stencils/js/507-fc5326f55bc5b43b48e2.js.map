{"version":3,"file":"js/507-fc5326f55bc5b43b48e2.js","mappings":"0OA+De,SAASA,EAAOC,GAC3B,MAAM,GAAEC,EAAF,MAAMC,EAAN,UAAaC,EAAb,WAAwBC,EAAxB,UAAoCC,EAApC,YAA+CC,GAAgBN,GAC/D,QAAEO,EAAF,cAAWC,IAAkBC,EAAAA,EAAAA,KAEnC,OAAKF,EAAQH,IAA8C,IAA/BG,EAAQH,GAAYM,OAK5C,uBACIT,GAAE,qBAAgBA,GAClBE,UAAW,CAAC,kCAAmCA,GAAWQ,KAAK,KAC/DC,KAAK,YAEL,sBAAIT,UAAU,yCAAyCD,GACtDK,EAAQH,IACLG,EAAQH,GAAYS,KAAI,CAACC,EAAMC,IA3E/C,SAAiBf,GACb,MAAM,KAAEc,EAAF,MAAQC,EAAR,YAAeT,EAAf,cAA4BE,EAA5B,UAA2CH,GAAcL,GACzD,OACFgB,EACAC,MAAM,aAAEC,IACRJ,EAEEK,EAAQ,GAAH,OAAMD,EAAaE,gBAAnB,YAAsCF,EAAaG,gBAC9D,OACI,uBACIC,IAAKjB,EACLO,KAAK,MACLX,GAAE,UAAKc,GACPQ,IAAG,wBAAmBR,GACtB,gBAAeP,IAAkBO,EACjCZ,UAAU,6CACVqB,QAAUC,GAAMnB,EAAYmB,EAAG,IAAKX,EAAMK,MAAAA,IAC1CO,UAAYD,GAAMnB,EAAYmB,EAAG,IAAKX,EAAMK,MAAAA,IAC5CQ,UAAW,GAEX,qBAAGR,MAAOA,EAAOhB,UAAU,QAAQyB,KAAMZ,GACpCG,GAEL,uBAAKhB,UAAU,UAAUS,KAAK,YACzBM,EAAaW,kBACV,uBAAK1B,UAAU,kCACX,uBAAKA,UAAU,YACX,uBAAKyB,KAAK,eAEbV,EAAaW,iBACTlB,KAAK,KACLmB,QAAQ,IAAK,OAIzBZ,EAAaa,aACV,uBAAK5B,UAAU,kCACX,uBAAKA,UAAU,YACX,uBAAKyB,KAAK,YAEd,wBAAMzB,UAAU,WAAhB,gBACCe,EAAaa,YAAYpB,KAAK,OAItCO,EAAac,aACV,uBAAK7B,UAAU,kCACX,uBAAKA,UAAU,YACX,uBAAKyB,KAAK,YAEd,wBAAMzB,UAAU,WAAhB,SACCe,EAAac,eAyBlBC,CAAQ,CACJnB,KAAAA,EACAC,MAAAA,EACAT,YAAAA,EACAE,cAAAA,EACAH,UAAAA,OAjBT,KAwBf,MAAM,OAAE6B,EAAF,OAAUC,EAAV,KAAkBC,GAASC,IAEjCtC,EAAOuC,UAAY,CACfrC,GAAIiC,EAAOK,WACXrC,MAAOgC,EACP/B,UAAW+B,EACX9B,WAAY+B,EAAOI,WACnBlC,UAAW+B,EAAKG,YAGpBxC,EAAOyC,aAAe,CAClBtC,MAAO,GACPC,UAAW","sources":["webpack://Plug-and-Play-Template/./src/modules/autocomplete-concierge/jsx/templates/people--v16.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStore } from '../store';\n\nfunction partial(props) {\n    const { data, index, handleClick, selectedIndex, childRefs } = props;\n    const {\n        action,\n        disp: { listMetadata },\n    } = data;\n\n    const title = `${listMetadata.peopleFirstName} ${listMetadata.peopleLastName}`;\n    return (\n        <div\n            ref={childRefs}\n            role=\"row\"\n            id={`${index}`}\n            key={`result-people-${index}`}\n            aria-selected={selectedIndex === index}\n            className=\"autocomplete-concierge__search-result-item\"\n            onClick={(e) => handleClick(e, { ...data, title })}\n            onKeyDown={(e) => handleClick(e, { ...data, title })}\n            tabIndex={-1}\n        >\n            <a title={title} className=\"title\" href={action}>\n                {title}\n            </a>\n            <div className=\"details\" role=\"gridcell\">\n                {listMetadata.peopleDepartment && (\n                    <div className=\"autocomplete-results__metadata\">\n                        <svg className=\"svg-icon\">\n                            <use href=\"#building\" />\n                        </svg>\n                        {listMetadata.peopleDepartment\n                            .join(',')\n                            .replace(',', ', ')}\n                    </div>\n                )}\n\n                {listMetadata.peoplePhone && (\n                    <div className=\"autocomplete-results__metadata\">\n                        <svg className=\"svg-icon\">\n                            <use href=\"#phone\" />\n                        </svg>\n                        <span className=\"sr-only\">Phone number</span>\n                        {listMetadata.peoplePhone.join(', ')}\n                    </div>\n                )}\n\n                {listMetadata.peopleEmail && (\n                    <div className=\"autocomplete-results__metadata\">\n                        <svg className=\"svg-icon\">\n                            <use href=\"#email\" />\n                        </svg>\n                        <span className=\"sr-only\">Email</span>\n                        {listMetadata.peopleEmail}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default function People(props) {\n    const { id, label, className, templateId, childRefs, handleClick } = props;\n    const { results, selectedIndex } = useStore();\n\n    if (!results[templateId] || results[templateId].length === 0) {\n        return null;\n    }\n\n    return (\n        <div\n            id={`result-row-${id}`}\n            className={[`autocomplete-concierge__section`, className].join(' ')}\n            role=\"rowgroup\"\n        >\n            <h2 className=\"autocomplete-concierge__section-title\">{label}</h2>\n            {results[templateId] &&\n                results[templateId].map((data, index) =>\n                    partial({\n                        data,\n                        index,\n                        handleClick,\n                        selectedIndex,\n                        childRefs,\n                    })\n                )}\n        </div>\n    );\n}\n\nconst { string, number, func } = PropTypes;\n\nPeople.propTypes = {\n    id: string.isRequired,\n    label: string,\n    className: string,\n    templateId: number.isRequired,\n    childRefs: func.isRequired,\n};\n\nPeople.defaultProps = {\n    label: ``,\n    className: ``,\n};\n"],"names":["People","props","id","label","className","templateId","childRefs","handleClick","results","selectedIndex","useStore","length","join","role","map","data","index","action","disp","listMetadata","title","peopleFirstName","peopleLastName","ref","key","onClick","e","onKeyDown","tabIndex","href","peopleDepartment","replace","peoplePhone","peopleEmail","partial","string","number","func","PropTypes","propTypes","isRequired","defaultProps"],"sourceRoot":""}