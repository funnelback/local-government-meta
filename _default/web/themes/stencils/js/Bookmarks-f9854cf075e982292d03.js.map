{"version":3,"file":"js/Bookmarks-f9854cf075e982292d03.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/libs/PromiseDebouncer.js","webpack://Plug-and-Play-Template/./src/modules/_global/js/uuid.js","webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/Services/BookmarkService/BookmarkService.js","webpack://Plug-and-Play-Template/./src/modules/_data-layer/jsx/Contexts/BookmarkContext/BookmarkContext.jsx","webpack://Plug-and-Play-Template/./src/modules/bookmarks/jsx/bookmarks.jsx","webpack://Plug-and-Play-Template/./src/modules/collapsible-card/jsx/Card.jsx","webpack://Plug-and-Play-Template/./src/modules/modal/jsx/modal.jsx"],"sourcesContent":["/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\n// eslint-disable-next-line import/prefer-default-export\nexport class PromiseDebouncer {\n    constructor() {\n        this.requests = new Map();\n    }\n\n    debounce(key, promiseFactory) {\n        const keyForComparison = JSON.stringify(key);\n        if (!this.requests.has(keyForComparison)) {\n            const promise = promiseFactory();\n            // Clean up after the promise.\n            promise.finally(() => {\n                this.requests.delete(keyForComparison);\n            });\n            this.requests.set(keyForComparison, promise);\n        }\n        return this.requests.get(keyForComparison);\n    }\n\n    get(key) {\n        return this.requests.get(JSON.stringify(key));\n    }\n}\n","/* eslint-disable no-bitwise */\n/**\n * Generate a (mostly) unique ID in an RFC4122 version 4 compliant format\n * Function ported from initFormSubmissionHandler.\n *\n * @returns String\n *\n * @source https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid\n */\nexport default function uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\n        (\n            c ^\n            (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\n        ).toString(16)\n    );\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\nimport { PromiseDebouncer } from '../../libs/PromiseDebouncer';\n\n/* eslint-disable import/prefer-default-export */\n\n/**\n * An bookmark service that provides bookmark data.\n */\nexport class BookmarkService {\n    constructor(dto) {\n        if (!dto) {\n            throw new Error(\n                `dto is required when instantiating a new BookmarkService`\n            );\n        }\n\n        [`bookmarkAdapter`].forEach((name) => {\n            if (!dto[name]) {\n                throw new Error(\n                    `${name} property is required when instantiating a new BookmarkService`\n                );\n            }\n        });\n\n        this.promiseDebouncer = new PromiseDebouncer();\n        this.bookmarkAdapter = dto.bookmarkAdapter;\n    }\n\n    /**\n     * Internal function to test if we are dealing with Promise.\n     *\n     * @param {object} objectToTest Object tested.\n     *\n     * @returns {boolean}\n     */\n    isPromise(objectToTest) {\n        return Object(objectToTest).constructor === Promise;\n    }\n\n    /**\n     * Get a list of bookmarks.\n     *\n     * @param {string} userId User id we are getting bookmarks for.\n     *\n     * @returns {Promise<array>} A promised list of bookmarks.\n     */\n    getAll(documentId) {\n        if (!this.isPromise(this.bookmarkAdapter.getAll)) {\n            return new Promise((resolve) => {\n                resolve(this.bookmarkAdapter.getAll(documentId));\n            });\n        }\n\n        return this.promiseDebouncer.debounce(\n            {\n                method: `getBookmarks`,\n                documentId,\n            },\n            () => this.bookmarkAdapter.getAll(documentId)\n        );\n    }\n\n    /**\n     * Update an bookmark with new values.\n     *\n     * @param {string} documentId The bookmark id.\n     * @param {object} bookmarks The bookmark data to replace.\n     *\n     * @returns {Promise<object>} The result of the update.\n     */\n    setAll(bookmarks, documentId) {\n        if (!this.isPromise(this.bookmarkAdapter.setAll)) {\n            return new Promise((resolve) => {\n                this.bookmarkAdapter.setAll(bookmarks, documentId);\n                resolve(bookmarks);\n            });\n        }\n\n        return this.bookmarkAdapter.setAll(bookmarks, documentId);\n    }\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\nimport React, { createContext, useEffect, useState, useCallback } from 'react';\n\n/**\n * The bookmarks context provider.\n *\n * @param {object} props The bookmarks provider props.\n *\n * @returns {JSX.Element} Bookmark context provider component.\n */\nexport const BookmarkProvider = ({ children, bookmarkService, documentId }) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isReady, setIsReady] = useState(false);\n    const [bookmarks, setBookmarks] = useState([]);\n\n    const getBookmarks = useCallback((id) => {\n        setIsLoading(true);\n\n        return bookmarkService.getAll(id).then((result) => {\n            setBookmarks(Array.from(result));\n            setIsLoading(false);\n        });\n    }, []);\n\n    const updateBookmarks = useCallback((id, newBookmarks) => {\n        setIsLoading(true);\n\n        return bookmarkService.setAll(newBookmarks, id).then((result) => {\n            setBookmarks(Array.from(result));\n            setIsLoading(false);\n        });\n    }, []);\n\n    useEffect(() => {\n        setIsLoading(true);\n        bookmarkService.getAll(documentId).then((result) => {\n            setBookmarks(Array.from(result));\n            setIsLoading(false);\n            setIsReady(true);\n        });\n    }, [setIsLoading, setIsReady, bookmarkService, documentId]);\n\n    return (\n        <BookmarkContext.Provider\n            value={{\n                getBookmarks,\n                updateBookmarks,\n                bookmarks,\n                bookmarkService,\n                isLoading,\n                isReady,\n            }}\n        >\n            {children}\n        </BookmarkContext.Provider>\n    );\n};\n\n/**\n * The context for user.\n * @export\n */\nexport const BookmarkContext = createContext({\n    bookmarks: [],\n    bookmarkService: null,\n    isLoading: false,\n    isReady: false,\n    documentId: null,\n    getBookmarks: () => {},\n    updateBookmarks: () => {},\n});\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n\nimport React, {\n    useState,\n    useCallback,\n    useEffect,\n    useRef,\n    createRef,\n    useContext,\n} from 'react';\nimport { OverlayProvider } from '@react-aria/overlays';\nimport { BookmarkService } from 'PlugAndPlay/_data-layer/js/global';\nimport {\n    BookmarkProvider,\n    BookmarkContext,\n} from 'PlugAndPlay/_data-layer/jsx/global';\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\n\nimport Modal from '../../modal/jsx/modal';\nimport Card from '../../collapsible-card/jsx/Card';\n\n/**\n * @param url string\n *\n * return true/false if the URL is a valid HTTP or HTTPS URL\n */\nconst isValidURL = (url) => {\n    const res = url.match(\n        /^(((H|h)(T|t)(T|t)(P|p)(S|s)?):\\/\\/)?[-a-zA-Z0-9@:%._+~#=]{2,100}\\.[a-zA-Z]{2,10}(\\/([-a-zA-Z0-9@:%_+.~#?&//=]*))?/\n    );\n\n    return res !== null;\n};\n\n/**\n * Returns the possible favicon URL for the specified URL.\n *\n * @param {string} url The URL.\n * @param {number} size The icon size.\n *\n * @returns {string} The favicon URL.\n */\nconst getFaviconURL = (url, size = 24) => {\n    let faviconURL = ``;\n    try {\n        const linkURL = new URL(url);\n\n        // Use the Google service to retrieve the favicon. Optional param = &sz=64.\n        faviconURL = `https://www.google.com/s2/favicons?domain=${linkURL.hostname}&sz=${size}`;\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(`invalid URL: ${url}`);\n    }\n\n    return faviconURL;\n};\n\n/**\n * Add protocol to URL.\n *\n * @param {string} url The URL to test.\n *\n * @returns {string} URL with protocol.\n */\nconst addProtocol = (url) => {\n    let _url = url;\n    if (!/^(?:f|ht)tps?:\\/\\//.test(url)) {\n        _url = `https://${url}`;\n    }\n    return _url;\n};\n\nfunction QuickLinksDialog({\n    currentLinks,\n    initialView,\n    maxLinks,\n    onDialogClose,\n    initialTitle,\n    initialSubtitle,\n    onSave,\n    formSpec,\n}) {\n    const urlTimer = useRef(null);\n    const urlRef = createRef(null);\n\n    const [view, setView] = useState(initialView);\n    const [title, setTitle] = useState(initialTitle);\n    const [subtitle, setSubtitle] = useState(initialSubtitle);\n    const [links, setLinks] = useState(currentLinks);\n\n    const [editIndex, setEditIndex] = useState(null);\n    const [urlValue, setURLValue] = useState(``);\n    const [URLFieldError, setURLFieldError] = useState(``);\n    const [titleValue, setTitleValue] = useState(``);\n    const [disableSaveButton, setDisableSaveButton] = useState(true);\n\n    const editBookmark = (e, link, index) => {\n        setURLValue(link.url);\n        setTitleValue(link.title);\n        setView(`edit`);\n        setTitle(`Update Bookmark`);\n        setSubtitle(``);\n        setDisableSaveButton(false);\n        setEditIndex(index);\n    };\n\n    const addBookmark = () => {\n        setView(`add`);\n        setTitle(`Add bookmark`);\n        setSubtitle(``);\n        setURLValue(``);\n        setTitleValue(``);\n        setDisableSaveButton(true);\n    };\n\n    const handleGoBack = () => {\n        setView(`list`);\n        setTitle(initialTitle);\n        setSubtitle(initialSubtitle);\n    };\n\n    const handleDeleteBookmark = (e, index) => {\n        const newLinks = [...links];\n        newLinks.splice(index, 1);\n        setLinks(newLinks);\n        setDisableSaveButton(false);\n\n        if (onSave) {\n            onSave(newLinks);\n        }\n\n        if (newLinks.length <= 0) {\n            setView(`add-only`);\n        }\n    };\n\n    const handleSaveBookmark = () => {\n        const newLinks = [...links];\n        if (editIndex !== null && view === `edit`) {\n            newLinks[editIndex].title = titleValue;\n            newLinks[editIndex].url = addProtocol(urlValue);\n\n            setView(`list`);\n            return;\n        }\n        if (view === `add` || view === `add-only`) {\n            if (urlValue) {\n                newLinks.push({\n                    title: titleValue,\n                    url: addProtocol(urlValue),\n                });\n            }\n\n            setLinks(newLinks);\n            onSave(newLinks);\n            setView(`list`);\n        }\n    };\n\n    useEffect(() => {\n        if (urlRef && urlRef.current) {\n            urlRef.current.focus();\n        }\n    }, [view]);\n\n    const handleURLChange = useCallback((event) => {\n        const { value } = event.target;\n        setURLValue(value);\n        clearTimeout(urlTimer.current);\n        setDisableSaveButton(true);\n        urlTimer.current = setTimeout(() => {\n            if (value.trim().length === 0) {\n                setDisableSaveButton(true);\n                setURLFieldError(`URL link is required`);\n            } else if (isValidURL(value) === false) {\n                setDisableSaveButton(true);\n                setURLFieldError(`The given URL link is invalid`);\n            } else {\n                setDisableSaveButton(false);\n                setURLFieldError(``);\n            }\n        }, 1000);\n    }, []);\n\n    const handleTitleChange = useCallback(\n        (event) => {\n            setTitleValue(event.currentTarget.value);\n\n            if (urlValue.length > 0 && URLFieldError !== ``) {\n                setDisableSaveButton(false);\n            }\n        },\n        [urlValue]\n    );\n\n    const handleEnterPress = useCallback(\n        (event) => {\n            if (event.keyCode === 13 && URLFieldError === ``) {\n                handleSaveBookmark();\n            }\n        },\n        [URLFieldError]\n    );\n\n    function customFooter(canSave) {\n        return (\n            <footer\n                className={[\n                    `quicklinks-modal__footer`,\n                    view !== 'list' && `quicklinks-modal__footer-right-aligned`,\n                ].join(' ')}\n            >\n                {view === 'list' ? (\n                    <>\n                        {links && links.length === maxLinks ? (\n                            <p className=\"quicklinks__dialog-limit-message\">\n                                You have reached your bookmark limit.\n                            </p>\n                        ) : (\n                            <div className=\"quicklinks-modal__footer-buttons-container\">\n                                <button\n                                    aria-label=\"Add new bookmark\"\n                                    type=\"button\"\n                                    className=\"quicklinks-modal__footer-button quicklinks-modal__footer-button--dashed\"\n                                    onClick={(e) => addBookmark(e)}\n                                >\n                                    <svg className=\"svg-icon\">\n                                        <use href=\"#add\" />\n                                    </svg>\n                                </button>\n                            </div>\n                        )}\n                    </>\n                ) : (\n                    <div className=\"quicklinks-modal__footer-buttons-container\">\n                        {links && links.length > 0 && (\n                            <button\n                                type=\"button\"\n                                className=\"quicklinks-modal__footer-button\"\n                                aria-label=\"Go back\"\n                                onClick={(e) => handleGoBack(e)}\n                            >\n                                Go Back\n                            </button>\n                        )}\n                        <button\n                            type=\"button\"\n                            aria-label=\"Save new bookmark\"\n                            disabled={canSave}\n                            className=\"quicklinks-modal__footer-button quicklinks-modal__footer-button--save\"\n                            onClick={(e) => handleSaveBookmark(e)}\n                        >\n                            Save\n                        </button>\n                    </div>\n                )}\n            </footer>\n        );\n    }\n\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n    return (\n        <OverlayProvider>\n            <Modal\n                titleId={titleId}\n                className=\"quicklinks-modal\"\n                onClose={onDialogClose}\n            >\n                <header className=\"quicklinks-modal__header\">\n                    <h1 id={titleId} className=\"quicklinks-modal__title\">\n                        {title}\n                    </h1>\n                    {subtitle && (\n                        <h2 className=\"quicklinks-modal__subtitle\">\n                            {subtitle}\n                        </h2>\n                    )}\n                    <button\n                        type=\"button\"\n                        onClick={onDialogClose}\n                        className=\"quicklinks-modal__header-close\"\n                    >\n                        <svg className=\"svg-icon\">\n                            <title>Close modal</title>\n                            <use href=\"#close\" />\n                        </svg>\n                    </button>\n                </header>\n\n                <div className=\"quicklinks-modal__body\">\n                    {view === `list` && (\n                        <>\n                            {links &&\n                                links.map((link, index) => {\n                                    return (\n                                        <div\n                                            className=\"quicklinks-modal__container\"\n                                            key={index}\n                                        >\n                                            <button\n                                                type=\"button\"\n                                                aria-label={`Edit bookmark ${link.title}`}\n                                                className=\"quicklinks-modal__edit-button\"\n                                                onClick={(e) =>\n                                                    editBookmark(e, link, index)\n                                                }\n                                            >\n                                                <div className=\"bookmark-icon\">\n                                                    <img\n                                                        alt=\"link icon\"\n                                                        className=\"bookmark-icon-image\"\n                                                        height={24}\n                                                        src={getFaviconURL(\n                                                            link.url\n                                                        )}\n                                                        loading=\"lazy\"\n                                                        width={24}\n                                                    />\n                                                </div>\n                                                <div className=\"quicklinks-modal__edit-button-title\">\n                                                    {link.title}\n                                                </div>\n                                                <svg className=\"svg-icon\">\n                                                    <use href=\"#edit\" />\n                                                </svg>\n                                            </button>\n\n                                            <button\n                                                type=\"button\"\n                                                aria-label={`Delete bookmark ${link.title}`}\n                                                className=\"quicklinks-modal__delete-button\"\n                                                onClick={(e) =>\n                                                    handleDeleteBookmark(\n                                                        e,\n                                                        index\n                                                    )\n                                                }\n                                            >\n                                                <svg className=\"svg-icon\">\n                                                    <use href=\"#subtract-alt\" />\n                                                </svg>\n                                            </button>\n                                        </div>\n                                    );\n                                })}\n                        </>\n                    )}\n                    {(view === `add` ||\n                        view === `add-only` ||\n                        view === `edit`) && (\n                        <div className=\"form custom-form custom-form--color-grey70\">\n                            <div\n                                className=\"sq-form-question sq-form-question-text\"\n                                id=\"sq_form_field_wrapper_bookmark-url\"\n                            >\n                                <label\n                                    className=\"sq-form-question-title\"\n                                    htmlFor=\"bookmark-url-input\"\n                                >\n                                    URL link\n                                    <abbr\n                                        className=\"sq-form-required-field\"\n                                        title=\"required\"\n                                    >\n                                        *\n                                    </abbr>\n                                </label>\n                                <div className=\"sq-form-question-answer\">\n                                    <input\n                                        ref={urlRef}\n                                        autoComplete=\"off\"\n                                        autoCapitalize=\"off\"\n                                        type=\"text\"\n                                        name=\"bookmark-url\"\n                                        size=\"30\"\n                                        maxLength=\"300\"\n                                        placeholder={\n                                            formSpec.linkUrlPlaceholder\n                                        }\n                                        id=\"bookmark-url-input\"\n                                        className=\"sq-form-field\"\n                                        value={urlValue}\n                                        onChange={handleURLChange}\n                                        onKeyDown={handleEnterPress}\n                                    />\n                                </div>\n                                <span className=\"sq-form-error\">\n                                    {URLFieldError}\n                                </span>\n                            </div>\n                            <div\n                                className=\"sq-form-question sq-form-question-text\"\n                                id=\"sq_form_field_wrapper_bookmark-title\"\n                            >\n                                <label\n                                    className=\"sq-form-question-title\"\n                                    htmlFor=\"bookmark-tile-input\"\n                                >\n                                    Name of bookmark\n                                </label>\n                                <div className=\"sq-form-question-answer\">\n                                    <input\n                                        autoComplete=\"off\"\n                                        type=\"text\"\n                                        name=\"bookmark-title\"\n                                        size=\"30\"\n                                        maxLength=\"300\"\n                                        placeholder={\n                                            formSpec.linkTitlePlaceholder\n                                        }\n                                        id=\"bookmark-tile-input\"\n                                        className=\"sq-form-field\"\n                                        value={titleValue}\n                                        onChange={handleTitleChange}\n                                        onKeyDown={handleEnterPress}\n                                    />\n                                </div>\n                                <em className=\"sq-form-question-note\">\n                                    Try to keep it as short as possible.\n                                </em>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                {customFooter(disableSaveButton)}\n            </Modal>\n        </OverlayProvider>\n    );\n}\n\nfunction QuickLinksList({\n    links,\n    maxLinks,\n    dialogView,\n    addBookmarks,\n    onDialogClose,\n    onSave,\n    formSpec,\n    listSpec,\n}) {\n    const handleClick = (e, location) => {\n        if (listSpec.openLinkTarget === '_blank') {\n            window.open(location, '_blank');\n        } else {\n            window.location.href = location;\n        }\n    };\n\n    return (\n        <div className=\"quicklinks__list\">\n            {links &&\n                links.map((link, index) => {\n                    return (\n                        <div className=\"quicklinks__link\" key={index}>\n                            <button\n                                type=\"button\"\n                                aria-label={`Open bookmark ${link.title}`}\n                                className=\"quicklinks__button\"\n                                onClick={(e) => handleClick(e, link.url)}\n                            >\n                                <div className=\"quicklinks__link-icon\">\n                                    <img\n                                        alt=\"link icon\"\n                                        className=\"quicklinks__link-icon-image\"\n                                        height={24}\n                                        src={getFaviconURL(link.url)}\n                                        loading=\"lazy\"\n                                        width={24}\n                                    />\n                                </div>\n                                <div className=\"quicklinks__link-title\">\n                                    {link.title}\n                                </div>\n                            </button>\n                        </div>\n                    );\n                })}\n            {(!maxLinks || links.length < maxLinks) && (\n                <div className=\"quicklinks__link\">\n                    <button\n                        type=\"button\"\n                        aria-label=\"Add new bookmark\"\n                        className=\"quicklinks__button quicklinks__button--dashed\"\n                        onClick={addBookmarks}\n                    >\n                        <svg className=\"svg-icon\">\n                            <use href=\"#add\" />\n                        </svg>\n                    </button>\n                </div>\n            )}\n            {dialogView === `list` && (\n                <QuickLinksDialog\n                    currentLinks={links}\n                    maxLinks={maxLinks}\n                    onDialogClose={onDialogClose}\n                    initialView={dialogView}\n                    initialTitle=\"Bookmarks\"\n                    initialSubtitle=\"Add up to four bookmarks.\"\n                    onSave={onSave}\n                    formSpec={formSpec}\n                />\n            )}\n            {dialogView === `add-only` && (\n                <QuickLinksDialog\n                    currentLinks={links}\n                    maxLinks={maxLinks}\n                    onDialogClose={onDialogClose}\n                    initialView={dialogView}\n                    initialTitle=\"New bookmark\"\n                    onSave={onSave}\n                    formSpec={formSpec}\n                />\n            )}\n        </div>\n    );\n}\n\nfunction Bookmarks({ title, maxLinks, documentId, formSpec, listSpec }) {\n    const [showEditBookmarks, setShowEditBookmarks] = useState(false);\n    const [dialogView, setDialogView] = useState('list');\n    const { bookmarks, getBookmarks, updateBookmarks } =\n        useContext(BookmarkContext);\n\n    useEffect(() => {\n        (async () => {\n            await getBookmarks(documentId);\n            if (bookmarks.length <= 0) {\n                setDialogView('add-only');\n            } else {\n                setDialogView('list');\n            }\n        })();\n    }, []);\n\n    const editBookmarks = useCallback(() => {\n        if (bookmarks.length <= 0) {\n            setDialogView('add-only');\n        } else {\n            setDialogView('list');\n        }\n        setShowEditBookmarks(true);\n    }, [bookmarks]);\n\n    const addBookmarks = useCallback(() => {\n        setDialogView('add-only');\n        setShowEditBookmarks(true);\n    }, []);\n\n    const handleDialogClose = useCallback(() => {\n        setShowEditBookmarks(false);\n    }, []);\n\n    const handleSave = useCallback((newBookmarks) => {\n        (async () => {\n            await updateBookmarks(documentId, newBookmarks);\n        })();\n    }, []);\n\n    const headingIcon = () => {\n        return (\n            <button\n                type=\"button\"\n                aria-label=\"Edit bookmarks\"\n                onClick={editBookmarks}\n                className=\"heading-icon\"\n            >\n                <svg className=\"svg-icon\">\n                    <use href=\"#edit\" />\n                </svg>\n            </button>\n        );\n    };\n\n    return (\n        <Card\n            headingIcon={headingIcon()}\n            title={title}\n            wrapperClasses=\"quicklinks\"\n            contentClasses=\"quicklinks__container\"\n        >\n            <QuickLinksList\n                dialogView={showEditBookmarks === true ? dialogView : undefined}\n                links={bookmarks}\n                maxLinks={maxLinks}\n                onDialogClose={handleDialogClose}\n                onSave={handleSave}\n                formSpec={formSpec}\n                listSpec={listSpec}\n                addBookmarks={addBookmarks}\n            />\n        </Card>\n    );\n}\n\nexport default function BookmarksProvider({\n    title,\n    maxLinks,\n    documentId,\n    bookmarkAdapter,\n    formSpec,\n    listSpec,\n}) {\n    const bookmarkService = new BookmarkService({ bookmarkAdapter });\n\n    return (\n        <BookmarkProvider\n            bookmarkService={bookmarkService}\n            documentId={documentId}\n        >\n            <Bookmarks\n                title={title}\n                maxLinks={maxLinks}\n                documentId={documentId}\n                formSpec={formSpec}\n                listSpec={listSpec}\n            />\n        </BookmarkProvider>\n    );\n}\n\nBookmarksProvider.defaultProps = {\n    maxLinks: 4,\n    title: ``,\n    documentId: 666,\n    listSpec: {\n        openLinkTarget: `_blank`,\n    },\n    formSpec: {\n        linkUrlPlaceholder: `Enter your link url`,\n        linkTitlePlaceholder: `Enter your link title`,\n    },\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useCallback, useState } from 'react';\n\nexport default function Card(props) {\n    const {\n        wrapperClasses,\n        contentClasses,\n        children,\n        id,\n        headingIcon,\n        isCollapsable,\n        isInitialCollapsed,\n        isScrollable,\n        subTitle,\n        title,\n        ...rest\n    } = props;\n\n    let storageId = ``;\n\n    if (id) {\n        storageId = `ComponentCard-${id}`;\n    }\n\n    let storageIsCollapsed = isInitialCollapsed || false;\n    if (storageId) {\n        storageIsCollapsed = localStorage.getItem(storageId) === `collapsed`;\n    }\n\n    const [isCollapsed, setCollapsed] = useState(storageIsCollapsed);\n\n    const wrapperClass = [\n        'collapsable-card',\n        'no-wysiwyg',\n        wrapperClasses,\n    ].join(' ');\n    const contentClass = [\n        'collapsable-card__contents',\n        contentClasses,\n        isScrollable && 'collapsable-card--scrollable',\n    ].join(' ');\n    const collapseClass = [\n        'svg-icon',\n        isCollapsed === false && 'collapsable-card__collapsed',\n    ].join(' ');\n\n    const toggleIsCollapsed = useCallback(() => {\n        setCollapsed(!isCollapsed);\n\n        if (storageId) {\n            localStorage.setItem(storageId, !isCollapsed ? `collapsed` : ``);\n        }\n    }, [storageId, isCollapsed]);\n\n    return (\n        <div className={wrapperClass} id={id} {...rest}>\n            <div className=\"collapsable-card__header\">\n                <h2 className=\"collapsable-card__header-text\">{title}</h2>\n                <div className=\"collapsable-card__header-right\">\n                    {subTitle && (\n                        <h3 className=\"collapsable-card__header-text collapsable-card__header-text--sub-title\">\n                            {subTitle}\n                        </h3>\n                    )}\n                    {isCollapsable && (\n                        <button\n                            type=\"button\"\n                            onClick={toggleIsCollapsed}\n                            className=\"collapsable-card__more-menu-button\"\n                            aria-expanded={!isCollapsed}\n                            aria-controls={`content-${id}`}\n                        >\n                            <svg className={collapseClass}>\n                                <title>\n                                    {isCollapsed\n                                        ? `Expand panel`\n                                        : `Collapse panel`}\n                                </title>\n                                <use href=\"#chevron\" />\n                            </svg>\n                        </button>\n                    )}\n                    {headingIcon}\n                </div>\n            </div>\n            {(isCollapsable !== true ||\n                (isCollapsable === true && isCollapsed === false)) && (\n                <div\n                    className={contentClass}\n                    id={`content-${id}`}\n                    role=\"region\"\n                    tabIndex={-1}\n                >\n                    {children}\n                </div>\n            )}\n        </div>\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */ // Disabled as prop spreading is the documented way to use the @react-aria framework\nimport React, { useEffect } from 'react';\nimport {\n    useOverlay,\n    usePreventScroll,\n    useModal,\n    OverlayContainer,\n} from '@react-aria/overlays';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope, useFocusManager } from '@react-aria/focus';\n\n/**\n * React implementation of the Plug and Play Modal, uses the Adobe @react-aria package\n * to handle the modal / dialog related accessability concerns such as focus movement, focus traps,\n * ESC to close ect.\n *\n * Needs to be wrapped within a <OverlayProvider> to aria hide the application when the modal opens.\n *\n * Comments on @react-aria hooks come directly from their documentation.\n */\nexport default function Modal({\n    titleId,\n    title,\n    onClose,\n    children,\n    className,\n}) {\n    return (\n        <OverlayContainer>\n            <div\n                className={`no-wysiwyg modal-wrapper ${\n                    className ? `${className}-wrapper` : ''\n                }`}\n            >\n                <FocusScope contain restoreFocus autoFocus>\n                    <ModalContent\n                        titleId={titleId}\n                        title={title}\n                        onClose={onClose}\n                        className={className}\n                    >\n                        {children}\n                    </ModalContent>\n                </FocusScope>\n            </div>\n        </OverlayContainer>\n    );\n}\n\nfunction ModalContent({ titleId, title, onClose, children, className }) {\n    // Base settings for @react-aria hooks\n    const settings = {\n        'aria-describedby': titleId,\n        title,\n        onClose,\n        isDismissable: true,\n        isOpen: true,\n    };\n\n    const modalRef = React.useRef();\n    const modalContentRef = React.useRef();\n    const focusManager = useFocusManager();\n\n    /*\n        Provides the behavior for overlays such as dialogs, popovers, and menus. Hides the overlay when\n        the user interacts outside it, when the Escape key is pressed, or optionally, on blur.\n    */\n    const { overlayProps, underlayProps } = useOverlay(\n        settings,\n        modalContentRef\n    );\n\n    /*\n        Prevents scrolling on the document body on mount, and restores it on unmount.\n        Also ensures that content does not shift due to the scrollbars disappearing.\n    */\n    usePreventScroll();\n\n    /*\n        Hides content outside the current <OverlayContainer> from screen readers on mount and restores it on unmount.\n    */\n    const { modalProps } = useModal();\n\n    /*\n        Provides the behavior and accessibility implementation for a dialog component.\n    */\n    const { dialogProps, titleProps } = useDialog(settings, modalContentRef);\n\n    /*\n        Remove the hidden attribute as soon as its drawn to the DOM so it transitions open like\n        the base ES6 modal in the framework.\n    */\n    useEffect(() => {\n        modalRef.current.removeAttribute('hidden');\n        focusManager.focusFirst(); // FocusScope autofocus property wont work due to being hidden so focus first now\n    }, [modalRef]);\n\n    return (\n        <div\n            ref={modalRef}\n            {...underlayProps}\n            hidden\n            className={`modal ${className || ''}`}\n        >\n            <div\n                ref={modalContentRef}\n                {...overlayProps}\n                {...dialogProps}\n                {...modalProps}\n                aria-modal=\"true\"\n                tabIndex=\"-1\"\n                className={`modal__content ${\n                    className ? `${className}__content` : ''\n                }`}\n            >\n                {titleId ? (\n                    ''\n                ) : (\n                    <h2\n                        {...titleProps}\n                        className={`${className ? `${className}__title` : ''}`}\n                    >\n                        {title}\n                    </h2>\n                )}\n                {children}\n            </div>\n        </div>\n    );\n}\n"],"names":["PromiseDebouncer","constructor","this","requests","Map","debounce","key","promiseFactory","keyForComparison","JSON","stringify","has","promise","finally","delete","set","get","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","BookmarkService","dto","Error","forEach","name","promiseDebouncer","bookmarkAdapter","isPromise","objectToTest","Object","Promise","getAll","documentId","method","resolve","setAll","bookmarks","BookmarkProvider","children","bookmarkService","isLoading","setIsLoading","useState","isReady","setIsReady","setBookmarks","getBookmarks","useCallback","id","then","result","Array","from","updateBookmarks","newBookmarks","useEffect","BookmarkContext","Provider","value","createContext","getFaviconURL","url","size","faviconURL","linkURL","URL","hostname","error","console","addProtocol","_url","test","QuickLinksDialog","currentLinks","initialView","maxLinks","onDialogClose","initialTitle","initialSubtitle","onSave","formSpec","urlTimer","useRef","urlRef","createRef","view","setView","title","setTitle","subtitle","setSubtitle","links","setLinks","editIndex","setEditIndex","urlValue","setURLValue","URLFieldError","setURLFieldError","titleValue","setTitleValue","disableSaveButton","setDisableSaveButton","handleSaveBookmark","newLinks","push","current","focus","handleURLChange","event","target","clearTimeout","setTimeout","trim","length","match","handleTitleChange","currentTarget","handleEnterPress","keyCode","titleId","className","onClose","type","onClick","href","map","link","index","e","editBookmark","alt","height","src","loading","width","splice","handleDeleteBookmark","htmlFor","ref","autoComplete","autoCapitalize","maxLength","placeholder","linkUrlPlaceholder","onChange","onKeyDown","linkTitlePlaceholder","canSave","join","disabled","QuickLinksList","dialogView","addBookmarks","listSpec","handleClick","location","openLinkTarget","window","open","Bookmarks","showEditBookmarks","setShowEditBookmarks","setDialogView","useContext","editBookmarks","handleDialogClose","handleSave","Card","headingIcon","wrapperClasses","contentClasses","undefined","BookmarksProvider","defaultProps","props","isCollapsable","isInitialCollapsed","isScrollable","subTitle","rest","storageId","storageIsCollapsed","localStorage","getItem","isCollapsed","setCollapsed","wrapperClass","contentClass","collapseClass","toggleIsCollapsed","setItem","role","tabIndex","Modal","contain","restoreFocus","autoFocus","ModalContent","settings","isDismissable","isOpen","modalRef","React","modalContentRef","focusManager","useFocusManager","overlayProps","underlayProps","useOverlay","usePreventScroll","modalProps","useModal","dialogProps","titleProps","useDialog","removeAttribute","focusFirst","hidden"],"sourceRoot":""}