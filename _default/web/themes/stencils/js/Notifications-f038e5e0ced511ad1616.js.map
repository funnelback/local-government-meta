{"version":3,"file":"js/Notifications-f038e5e0ced511ad1616.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/libs/PromiseDebouncer.js","webpack://Plug-and-Play-Template/./src/modules/_global/js/uuid.js","webpack://Plug-and-Play-Template/./src/modules/modal/jsx/modal.jsx","webpack://Plug-and-Play-Template/./src/modules/modal/jsx/useDivButtonModalOpen.jsx","webpack://Plug-and-Play-Template/./src/modules/_data-layer/jsx/Contexts/NotificationsContext/NotificationsContext.jsx","webpack://Plug-and-Play-Template/./src/modules/_data-layer/js/Services/NotificationService/NotificationService.js","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notification-types/BaseNotification.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notification-types/Announcement.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notification-types/Assignment.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notification-types/NotificationFactory.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notificationList.jsx","webpack://Plug-and-Play-Template/./src/modules/notifications/jsx/notifications.jsx","webpack://Plug-and-Play-Template/./src/modules/popover/jsx/popover.jsx"],"sourcesContent":["/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\n// eslint-disable-next-line import/prefer-default-export\nexport class PromiseDebouncer {\n    constructor() {\n        this.requests = new Map();\n    }\n\n    debounce(key, promiseFactory) {\n        const keyForComparison = JSON.stringify(key);\n        if (!this.requests.has(keyForComparison)) {\n            const promise = promiseFactory();\n            // Clean up after the promise.\n            promise.finally(() => {\n                this.requests.delete(keyForComparison);\n            });\n            this.requests.set(keyForComparison, promise);\n        }\n        return this.requests.get(keyForComparison);\n    }\n\n    get(key) {\n        return this.requests.get(JSON.stringify(key));\n    }\n}\n","/* eslint-disable no-bitwise */\n/**\n * Generate a (mostly) unique ID in an RFC4122 version 4 compliant format\n * Function ported from initFormSubmissionHandler.\n *\n * @returns String\n *\n * @source https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid\n */\nexport default function uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\n        (\n            c ^\n            (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\n        ).toString(16)\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */ // Disabled as prop spreading is the documented way to use the @react-aria framework\nimport React, { useEffect } from 'react';\nimport {\n    useOverlay,\n    usePreventScroll,\n    useModal,\n    OverlayContainer,\n} from '@react-aria/overlays';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope, useFocusManager } from '@react-aria/focus';\n\n/**\n * React implementation of the Plug and Play Modal, uses the Adobe @react-aria package\n * to handle the modal / dialog related accessability concerns such as focus movement, focus traps,\n * ESC to close ect.\n *\n * Needs to be wrapped within a <OverlayProvider> to aria hide the application when the modal opens.\n *\n * Comments on @react-aria hooks come directly from their documentation.\n */\nexport default function Modal({\n    titleId,\n    title,\n    onClose,\n    children,\n    className,\n}) {\n    return (\n        <OverlayContainer>\n            <div\n                className={`no-wysiwyg modal-wrapper ${\n                    className ? `${className}-wrapper` : ''\n                }`}\n            >\n                <FocusScope contain restoreFocus autoFocus>\n                    <ModalContent\n                        titleId={titleId}\n                        title={title}\n                        onClose={onClose}\n                        className={className}\n                    >\n                        {children}\n                    </ModalContent>\n                </FocusScope>\n            </div>\n        </OverlayContainer>\n    );\n}\n\nfunction ModalContent({ titleId, title, onClose, children, className }) {\n    // Base settings for @react-aria hooks\n    const settings = {\n        'aria-describedby': titleId,\n        title,\n        onClose,\n        isDismissable: true,\n        isOpen: true,\n    };\n\n    const modalRef = React.useRef();\n    const modalContentRef = React.useRef();\n    const focusManager = useFocusManager();\n\n    /*\n        Provides the behavior for overlays such as dialogs, popovers, and menus. Hides the overlay when\n        the user interacts outside it, when the Escape key is pressed, or optionally, on blur.\n    */\n    const { overlayProps, underlayProps } = useOverlay(\n        settings,\n        modalContentRef\n    );\n\n    /*\n        Prevents scrolling on the document body on mount, and restores it on unmount.\n        Also ensures that content does not shift due to the scrollbars disappearing.\n    */\n    usePreventScroll();\n\n    /*\n        Hides content outside the current <OverlayContainer> from screen readers on mount and restores it on unmount.\n    */\n    const { modalProps } = useModal();\n\n    /*\n        Provides the behavior and accessibility implementation for a dialog component.\n    */\n    const { dialogProps, titleProps } = useDialog(settings, modalContentRef);\n\n    /*\n        Remove the hidden attribute as soon as its drawn to the DOM so it transitions open like\n        the base ES6 modal in the framework.\n    */\n    useEffect(() => {\n        modalRef.current.removeAttribute('hidden');\n        focusManager.focusFirst(); // FocusScope autofocus property wont work due to being hidden so focus first now\n    }, [modalRef]);\n\n    return (\n        <div\n            ref={modalRef}\n            {...underlayProps}\n            hidden\n            className={`modal ${className || ''}`}\n        >\n            <div\n                ref={modalContentRef}\n                {...overlayProps}\n                {...dialogProps}\n                {...modalProps}\n                aria-modal=\"true\"\n                tabIndex=\"-1\"\n                className={`modal__content ${\n                    className ? `${className}__content` : ''\n                }`}\n            >\n                {titleId ? (\n                    ''\n                ) : (\n                    <h2\n                        {...titleProps}\n                        className={`${className ? `${className}__title` : ''}`}\n                    >\n                        {title}\n                    </h2>\n                )}\n                {children}\n            </div>\n        </div>\n    );\n}\n","/* eslint-disable import/prefer-default-export */\nimport { useRef, useState } from 'react';\nimport { useButton } from '@react-aria/button';\n/**\n * @returns Hooks to open and close the modal dialog from interacting with the a div rather than a button\n */\nexport default function useDivButtonModalOpen() {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const openModalRef = useRef();\n\n    let { buttonProps: modalOpenProps } = useButton(\n        {\n            onPress: () => setIsModalOpen(true),\n        },\n        openModalRef\n    );\n\n    // Add our own fields\n    modalOpenProps = {\n        ...modalOpenProps,\n        role: 'button',\n        tabIndex: '0',\n        'aria-label': 'Open in modal',\n    };\n    delete modalOpenProps.type;\n\n    return {\n        openModalRef, // useRef\n        modalOpenProps, // useKeyboard\n        isModalOpen, // useState get\n        setIsModalOpen, // useState set\n    };\n}\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\nimport React, { createContext, useState, useCallback } from 'react';\n\n/**\n * The context.\n * @export\n */\nexport const NotificationContext = createContext({\n    isLoading: false,\n    notifications: [],\n    getNotifications: null,\n    isMoreNotifications: false,\n\n    setRead: null,\n    unreadNotifications: 0,\n    getUnreadNotificationsCount: null,\n\n    // Optional\n    pinnedNotifications: [],\n    getPinnedNotifications: null,\n    setPinned: null,\n});\n\n/**\n * The context provider.\n * @param {object} props The provider props.\n * @returns {JSX.Element} Context provider component.\n */\nexport const NotificationProvider = ({ children, notificationService }) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [pinnedNotifications, setPinnedNotifications] = useState([]);\n    const [notifications, setNotifications] = useState([]);\n    const [isMoreNotifications, setIsMoreNotifications] = useState(false);\n    const [unreadNotificationsCount, setUnreadNotificationsCount] = useState(0);\n\n    // Function to get count of unread notifications\n    const getUnreadNotificationsCount = useCallback((args) => {\n        setIsLoading(true);\n        return notificationService\n            .getUnreadNotificationsCount(args)\n            .then((count) => {\n                setUnreadNotificationsCount(count);\n                setIsLoading(false);\n            });\n    }, []);\n\n    // Function to get pinned notifications\n    const getPinnedNotifications = useCallback((args) => {\n        setIsLoading(true);\n        return notificationService\n            .getPinnedNotifications(args)\n            .then((results) => {\n                setPinnedNotifications(results);\n                setIsLoading(false);\n            });\n    }, []);\n\n    // Function to get notifications or get the next page of notifications\n    const getNotifications = useCallback(\n        (args) => {\n            setIsLoading(true);\n            return notificationService.getNotifications(args).then((result) => {\n                // If there is no start position its a fresh request\n                if (!args.start || args.reload) {\n                    setNotifications(result.notifications);\n                } else {\n                    // Otherwise its an additional page so add it to the internal data\n                    setNotifications(\n                        [...notifications].concat(result.notifications)\n                    );\n                }\n\n                setIsMoreNotifications(result.next);\n                setIsLoading(false);\n            });\n        },\n        [notifications]\n    );\n\n    // Set the read flag on a notification\n    const setRead = (args) => {\n        setIsLoading(true);\n        return notificationService.setRead(args).then((result) => {\n            // Update the local copy of the notifications using the result return\n            const updatedNotifications = [...notifications];\n\n            // Find the item to update (from response) in the local list\n            const index = notifications.findIndex(\n                (notification) => notification.id === result.id\n            );\n            if (index !== -1) {\n                updatedNotifications[index] = result;\n                setNotifications(updatedNotifications);\n\n                // If successfuly changed to read, decrement the unread counter\n                if (result.read) {\n                    setUnreadNotificationsCount(unreadNotificationsCount - 1);\n                }\n            }\n            setIsLoading(false);\n        });\n    };\n\n    /*\n        Pin the notification: alert the notification service than it has been pinned / unpinned\n        then move the item locally between the pinned and regular list. This may require\n        a data reload, see below.\n    */\n    const setPinned = (args) => {\n        setIsLoading(true);\n        return notificationService.setPinned(args).then((result) => {\n            // Update the local copy of the notifications using the result return\n            let updatedNotifications = [...notifications];\n            let updatedPinnedNotifications = [...pinnedNotifications];\n\n            // Move the notification from one list to the other\n            if (args.pinned) {\n                // Being pinned so remove from regular list\n                updatedNotifications = notifications.filter(\n                    (notification) => notification.id !== result.id\n                );\n                // Add into pinned list\n                updatedPinnedNotifications.push(result);\n                // Sort it into the correct place in the list (newest shown first)\n                updatedPinnedNotifications.sort((a, b) => {\n                    return b.createdDate.getTime() - a.createdDate.getTime();\n                });\n\n                // Update notifications list to remove the now pinned notification\n                setNotifications(updatedNotifications);\n            } else {\n                // Being unpinned so remove from pinned list\n                updatedPinnedNotifications = pinnedNotifications.filter(\n                    (notification) => notification.id !== result.id\n                );\n\n                /*\n                    To keep the paginated loading in sync the notifications list may needs to be \n                    refreshed if the notification being removed doesnt slot in above the last loaded\n                    notification as otherwise its unknown its place in the order.\n\n                    If the unpinned notification is newer (higher getTime number) than the last item\n                    in the notifications list it can just be dropped into the list; if its older or\n                    equal a reload is needed to be sure where it should be in the pageing.\n                */\n                const lastNotification = updatedNotifications.slice(-1).pop();\n                if (\n                    !lastNotification ||\n                    result.createdDate.getTime() <\n                        lastNotification.createdDate.getTime()\n                ) {\n                    // Reload needed to check where the notification should be\n                    getNotifications({\n                        reload: true,\n                        start: 0,\n                        max: notifications.length,\n                    });\n                } else {\n                    // No reload needed, add into notifications list\n                    updatedNotifications.push(result);\n                    // Sort it into the correct place in the list (newest shown first)\n                    updatedNotifications.sort((a, b) => {\n                        return (\n                            b.createdDate.getTime() - a.createdDate.getTime()\n                        );\n                    });\n                    // Update notifications list\n                    setNotifications(updatedNotifications);\n                }\n            }\n\n            // Add or remove from the pinned notifications area\n            setPinnedNotifications(updatedPinnedNotifications);\n            setIsLoading(false);\n        });\n    };\n\n    return (\n        <NotificationContext.Provider\n            value={{\n                isLoading,\n                notifications,\n                getNotifications,\n                isMoreNotifications,\n\n                setRead,\n                unreadNotificationsCount,\n                getUnreadNotificationsCount,\n\n                pinnedNotifications,\n                getPinnedNotifications,\n                setPinned,\n            }}\n        >\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n","/*!\n * @license\n * Copyright Squiz Australia Pty Ltd. All Rights Reserved.\n */\n\nimport { PromiseDebouncer } from '../../libs/PromiseDebouncer';\n\n/* eslint-disable import/prefer-default-export */\n\n/**\n * An notifications feed service that provides data.\n */\nexport class NotificationService {\n    constructor(args) {\n        if (!args) {\n            throw new Error(\n                `args is required when instantiating a new NotificationService`\n            );\n        }\n\n        [`notificationAdapter`].forEach((name) => {\n            if (!args[name]) {\n                throw new Error(\n                    `${name} property is required when instantiating a new NotificationService`\n                );\n            }\n        });\n\n        this.promiseDebouncer = new PromiseDebouncer();\n        this.notificationAdapter = args.notificationAdapter;\n    }\n\n    /**\n     * Get a list of notifications.\n     * @param {object} args The notifications dto.\n     * @returns {Promise<array>} A promised list of notifications.\n     */\n    getNotifications(args) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `getNotifications`,\n                ...args,\n            },\n            () => this.notificationAdapter.getNotifications(args)\n        );\n    }\n\n    /**\n     * Get a list of pinned notifications.\n     * @param {object} args The notifications dto.\n     * @returns {Promise<array>} A promised list of notifications.\n     */\n    getPinnedNotifications(args) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `gePinnedNotifications`,\n                ...args,\n            },\n            () => this.notificationAdapter.getPinnedNotifications(args)\n        );\n    }\n\n    /**\n     * Get a count of unread notifications.\n     * @param {object} args The notifications dto.\n     * @returns {Promise<integer>} A count of the number of unread.\n     */\n    getUnreadNotificationsCount(args) {\n        return this.promiseDebouncer.debounce(\n            {\n                method: `getUnreadNotificationsCount`,\n                ...args,\n            },\n            () => this.notificationAdapter.getUnreadNotificationsCount(args)\n        );\n    }\n\n    /**\n     *  Update the read status on the notification\n     * @param {object} args The notifications dto.\n     * @returns {Promise} The changed notification\n     */\n    setRead(args) {\n        return this.notificationAdapter.setRead(args);\n    }\n\n    /**\n     *  Update the read pinned on the notification\n     * @param {object} args The notifications dto.\n     * @returns {Promise} The changed notification\n     */\n    setPinned(args) {\n        return this.notificationAdapter.setPinned(args);\n    }\n}\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect } from 'react';\nimport { formatDistance } from 'date-fns';\n\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport Modal from '../../../modal/jsx/modal';\nimport useDivButtonModalOpen from '../../../modal/jsx/useDivButtonModalOpen';\n\nexport default function BaseNotification(args) {\n    const { title, subtitle, body, read, onClick } = args;\n    const { openModalRef, modalOpenProps, isModalOpen, setIsModalOpen } =\n        useDivButtonModalOpen();\n\n    useEffect(() => {\n        // When modal is opened pass the 'click' back up to the parent\n        if (isModalOpen) {\n            onClick();\n        }\n    }, [isModalOpen]);\n\n    return (\n        <>\n            <div\n                {...modalOpenProps}\n                ref={openModalRef}\n                className={`notification-content ${\n                    !read ? 'notification-content--unread' : ''\n                }`}\n            >\n                <div className=\"notification-content__header\">\n                    <h2 className=\"notification-content__title\">{title}</h2>\n                </div>\n                <div className=\"notification-content__body\">\n                    {subtitle ? (\n                        <div className=\"notification-content__subtitle\">\n                            {title}\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    <div className=\"notification-content__description\">\n                        {body}\n                    </div>\n                </div>\n            </div>\n            {isModalOpen && (\n                <BaseNotificationModal\n                    {...args}\n                    handleModalClose={() => {\n                        setIsModalOpen(false);\n                    }}\n                />\n            )}\n        </>\n    );\n}\n\nexport function BaseNotificationModal({\n    type,\n    title,\n    subtitle,\n    createdDate,\n    body,\n    pinned,\n    handleModalClose,\n    onPin,\n    pinningAlowed,\n}) {\n    let createDistance = formatDistance(createdDate, new Date(), {\n        addSuffix: true,\n    });\n\n    // Condense any distance less than a day into 'Today'\n    if (['minute', 'hour'].some((el) => createDistance.includes(el))) {\n        createDistance = 'Today';\n    }\n\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n    return (\n        <Modal\n            titleId={titleId}\n            onClose={(e) => {\n                handleModalClose(e);\n            }}\n        >\n            <div\n                className={`notification-content-modal notification-content-modal--${type}`}\n            >\n                <header className=\"notification-content-modal__header\">\n                    <h2\n                        id={titleId}\n                        className=\"notification-content-modal__title\"\n                    >\n                        {title}\n                    </h2>\n                </header>\n                <div className=\"notification-content-modal__body\">\n                    <div className=\"notification-content-modal__date-distance\">\n                        {createDistance}\n                    </div>\n                    {subtitle ? (\n                        <div className=\"notification-content-modal__subtitle\">\n                            {subtitle}\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    <div className=\"notification-content-modal__description\">\n                        {body}\n                    </div>\n                </div>\n                {pinningAlowed && (\n                    <footer className=\"notification-content-modal__footer\">\n                        <button\n                            type=\"button\"\n                            onClick={onPin}\n                            className=\"notification-content-modal__pin\"\n                        >\n                            <svg aria-hidden=\"true\" className=\"svg-icon\">\n                                <use href=\"#pin\" />\n                            </svg>\n                            {pinned ? 'Unpin it' : 'Pin it'}\n                        </button>\n                    </footer>\n                )}\n            </div>\n        </Modal>\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect } from 'react';\nimport { formatDistance } from 'date-fns';\n\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport Modal from '../../../modal/jsx/modal';\nimport useDivButtonModalOpen from '../../../modal/jsx/useDivButtonModalOpen';\n\nexport default function Announcement(args) {\n    const { title, course, body, read, onClick } = args;\n    const { openModalRef, modalOpenProps, isModalOpen, setIsModalOpen } =\n        useDivButtonModalOpen();\n\n    useEffect(() => {\n        // When modal is opened pass the 'click' back up to the parent\n        if (isModalOpen) {\n            onClick();\n        }\n    }, [isModalOpen]);\n\n    return (\n        <>\n            <div\n                {...modalOpenProps}\n                ref={openModalRef}\n                className={`notification-content ${\n                    !read ? 'notification-content--unread' : ''\n                }`}\n            >\n                <div className=\"notification-content__header\">\n                    <svg aria-hidden=\"true\" className=\"svg-icon\">\n                        <use href=\"#announcement\" />\n                    </svg>\n                    <h2 className=\"notification-content__title\">\n                        {course ? `${course} | ` : ''}Announcement\n                    </h2>\n                </div>\n                <div className=\"notification-content__body\">\n                    <div className=\"notification-content__subtitle\">\n                        {title}\n                    </div>\n                    <div className=\"notification-content__description\">\n                        {body}\n                    </div>\n                </div>\n            </div>\n            {isModalOpen && (\n                <AnnouncementModal\n                    {...args}\n                    handleModalClose={() => {\n                        setIsModalOpen(false);\n                    }}\n                />\n            )}\n        </>\n    );\n}\n\nexport function AnnouncementModal({\n    type,\n    title,\n    course,\n    createdDate,\n    body,\n    pinned,\n    handleModalClose,\n    onPin,\n    pinningAlowed,\n}) {\n    let createDistance = formatDistance(createdDate, new Date(), {\n        addSuffix: true,\n    });\n\n    // Condense any distance less than a day into 'Today'\n    if (['minute', 'hour'].some((el) => createDistance.includes(el))) {\n        createDistance = 'Today';\n    }\n\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n    return (\n        <Modal titleId={titleId} onClose={handleModalClose}>\n            <div\n                className={`notification-content-modal notification-content-modal--${type}`}\n            >\n                <header className=\"notification-content-modal__header\">\n                    <svg aria-hidden=\"true\" className=\"svg-icon\">\n                        <use href=\"#announcement\" />\n                    </svg>\n                    <h2\n                        id={titleId}\n                        className=\"notification-content-modal__title\"\n                    >\n                        {course ? `${course} | ` : ''} Announcement\n                    </h2>\n                </header>\n\n                <div className=\"notification-content-modal__body\">\n                    <div className=\"notification-content-modal__date-distance\">\n                        {createDistance}\n                    </div>\n                    {title ? (\n                        <div className=\"notification-content-modal__subtitle\">\n                            {title}\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    <div className=\"notification-content-modal__description\">\n                        {body}\n                    </div>\n                </div>\n\n                {pinningAlowed && (\n                    <footer className=\"notification-content-modal__footer\">\n                        <button\n                            type=\"button\"\n                            onClick={onPin}\n                            className=\"notification-content-modal__pin\"\n                        >\n                            <svg aria-hidden=\"true\" className=\"svg-icon\">\n                                <use href=\"#pin\" />\n                            </svg>\n                            {pinned ? 'Unpin it' : 'Pin it'}\n                        </button>\n                    </footer>\n                )}\n            </div>\n        </Modal>\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect } from 'react';\nimport { format, formatDistance } from 'date-fns';\n\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport Modal from '../../../modal/jsx/modal';\nimport useDivButtonModalOpen from '../../../modal/jsx/useDivButtonModalOpen';\n\nexport default function Assignment(args) {\n    const { title, course, body, read, onClick } = args;\n    const { openModalRef, modalOpenProps, isModalOpen, setIsModalOpen } =\n        useDivButtonModalOpen();\n\n    useEffect(() => {\n        // When modal is opened pass the 'click' back up to the parent\n        if (isModalOpen) {\n            onClick();\n        }\n    }, [isModalOpen]);\n\n    return (\n        <>\n            <div\n                {...modalOpenProps}\n                ref={openModalRef}\n                className={`notification-content ${\n                    !read ? 'notification-content--unread' : ''\n                }`}\n            >\n                <div className=\"notification-content__header\">\n                    <svg aria-hidden=\"true\" className=\"svg-icon\">\n                        <use href=\"#assignment\" />\n                    </svg>\n                    <h2 className=\"notification-content__title\">\n                        {course ? `${course} | ` : ''}Assignment\n                    </h2>\n                </div>\n                <div className=\"notification-content__body\">\n                    {title && (\n                        <div className=\"notification-content__subtitle\">\n                            {title}\n                        </div>\n                    )}\n\n                    <div className=\"notification-content__description\">\n                        {body}\n                    </div>\n                </div>\n            </div>\n            {isModalOpen && (\n                <AssignmentModal\n                    {...args}\n                    handleModalClose={() => {\n                        setIsModalOpen(false);\n                    }}\n                />\n            )}\n        </>\n    );\n}\n\nexport function AssignmentModal({\n    type,\n    course,\n    createdDate,\n    dueDate,\n    body,\n    externalLink,\n    pinned,\n    handleModalClose,\n    onPin,\n    pinningAlowed,\n}) {\n    let createDistance = formatDistance(createdDate, new Date(), {\n        addSuffix: true,\n    });\n\n    // Condense any distance less than a day into 'Today'\n    if (['minute', 'hour'].some((el) => createDistance.includes(el))) {\n        createDistance = 'Today';\n    }\n\n    const dueDateText = format(dueDate, 'dd MMM');\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n    return (\n        <Modal titleId={titleId} onClose={handleModalClose}>\n            <div\n                className={`notification-content-modal notification-content-modal--${type}`}\n            >\n                <header className=\"notification-content-modal__header\">\n                    <svg aria-hidden=\"true\" className=\"svg-icon\">\n                        <use href=\"#assignment\" />\n                    </svg>\n                    <h2\n                        id={titleId}\n                        className=\"notification-content-modal__title\"\n                    >\n                        {course ? `${course} | ` : ''} Assignment\n                    </h2>\n                </header>\n\n                <div className=\"notification-content-modal__body\">\n                    <div className=\"notification-content-modal__date-distance\">\n                        {createDistance}\n                    </div>\n                    {dueDate ? (\n                        <div className=\"notification-content-modal__subtitle\">\n                            Due {dueDateText}\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                    <div className=\"notification-content-modal__description\">\n                        {body}\n                    </div>\n\n                    <a\n                        href={externalLink}\n                        className=\"notification-content-modal__link\"\n                    >\n                        <svg className=\"svg-icon svg-icon--small\">\n                            <title>External link</title>\n                            <use href=\"#external\" />\n                        </svg>\n                        View in Canvas\n                    </a>\n                </div>\n\n                {pinningAlowed && (\n                    <footer className=\"notification-content-modal__footer\">\n                        <button\n                            type=\"button\"\n                            onClick={onPin}\n                            className=\"notification-content-modal__pin\"\n                        >\n                            <svg aria-hidden=\"true\" className=\"svg-icon\">\n                                <use href=\"#pin\" />\n                            </svg>\n                            {pinned ? 'Unpin it' : 'Pin it'}\n                        </button>\n                    </footer>\n                )}\n            </div>\n        </Modal>\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable import/prefer-default-export */\nimport React from 'react';\n\nimport BaseNotification from './BaseNotification';\nimport Announcement from './Announcement';\nimport Assignment from './Assignment';\n\nexport default function NotificationFactory(args) {\n    const { type } = args;\n    switch (type) {\n        case 'announcement':\n            return <Announcement {...args} />;\n        case 'assignment':\n            return <Assignment {...args} />;\n        default:\n            return <BaseNotification {...args} />;\n    }\n}\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable no-use-before-define */\n/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport { formatDistance } from 'date-fns';\n\nimport NotificationFactory from './notification-types/NotificationFactory';\n\nexport default function NotificationsList({\n    notifications,\n    showLimit,\n    pinnedList,\n    pinningAlowed,\n    setRead,\n    setPinned,\n}) {\n    let notificationsToRender = notifications;\n    let daysAgo = ''; // Keep track of when the date distance changes between notifications\n\n    if (showLimit > -1) {\n        notificationsToRender = notificationsToRender.slice(0, showLimit);\n    }\n\n    return notificationsToRender.map((notification, i) => {\n        const { pinned } = notification;\n        let showDaysSince = false;\n        let createDistance;\n\n        if (!pinnedList) {\n            createDistance = formatDistance(\n                notification.createdDate,\n                new Date(),\n                {\n                    addSuffix: true,\n                }\n            );\n\n            // Condense any distance less than a day into 'Today'\n            if (['minute', 'hour'].some((el) => createDistance.includes(el))) {\n                createDistance = 'Today';\n            }\n\n            // If the distance has changed from last notification add class to show visual X days/months ago line\n            if (daysAgo !== createDistance) {\n                showDaysSince = true;\n                daysAgo = createDistance;\n            }\n        }\n\n        return (\n            <li\n                key={`${notification.createdDate.getTime()}`}\n                className={`notification-item ${\n                    pinned ? 'notification-item--pinned' : ''\n                }`}\n            >\n                {/* If a pinned list is being printed use this heading */}\n                {i === 0 && pinnedList ? (\n                    <div className=\"notification-item__pinned\">\n                        {`Pinned (${notifications.length})`}\n                    </div>\n                ) : (\n                    <> </>\n                )}\n\n                {/* If is NOT a pinned list AND the date distance has changed use this heading */}\n                {!pinnedList && showDaysSince ? (\n                    <div className=\"notification-item__distance\">\n                        {createDistance}\n                    </div>\n                ) : (\n                    <> </>\n                )}\n\n                <div className=\"notification-item__body\">\n                    {/* Use a factory pattern to decide what the content of the notification looks like */}\n                    <NotificationFactory\n                        {...notification}\n                        onClick={() => {\n                            if (!notification.read) {\n                                setRead(notification);\n                            }\n                        }}\n                        onPin={() => setPinned(notification)}\n                        pinningAlowed={pinningAlowed}\n                    />\n\n                    {pinningAlowed ? (\n                        <button\n                            type=\"button\"\n                            onClick={() => setPinned(notification)}\n                            className={`notification-item__icon ${\n                                pinned ? 'notification-item__icon--pinned' : ''\n                            }`}\n                        >\n                            <svg className=\"svg-icon\">\n                                <title>\n                                    {pinned ? 'Unpin' : 'Pin'} notification\n                                </title>\n                                <use href=\"#pin\" />\n                            </svg>\n                        </button>\n                    ) : (\n                        <></>\n                    )}\n                </div>\n            </li>\n        );\n    });\n}\n","/* eslint-disable react/prefer-stateless-function */\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { OverlayProvider } from '@react-aria/overlays';\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\n\n// Data layer imports\nimport {\n    NotificationProvider,\n    NotificationContext,\n} from 'PlugAndPlay/_data-layer/jsx/global';\nimport { NotificationService } from 'PlugAndPlay/_data-layer/js/global';\n\nimport NotificationList from './notificationList';\nimport Popover from '../../popover/jsx/popover';\n\nimport '../css/_global.scss'; // Last so our CSS overrides any dependencies above\n\nexport default function Notifications({\n    popover,\n    title,\n    enablePinnedNotifications,\n    pinnedLimit,\n    notificationsLimit,\n    showUnreadIndicator,\n    notificationAdapter,\n}) {\n    const notificationService = new NotificationService({\n        notificationAdapter,\n    });\n\n    // Wrap the app in its Context Provider so the content data can be accessed within\n    return (\n        <OverlayProvider className=\"notifications-wrapper\">\n            <NotificationProvider notificationService={notificationService}>\n                <NotificationsContent\n                    popover={popover}\n                    title={title}\n                    enablePinnedNotifications={enablePinnedNotifications}\n                    showUnreadIndicator={showUnreadIndicator}\n                    notificationsLimit={notificationsLimit}\n                    pinnedLimit={pinnedLimit}\n                />\n            </NotificationProvider>\n        </OverlayProvider>\n    );\n}\n\nfunction NotificationsContent({\n    popover,\n    title,\n    enablePinnedNotifications,\n    showUnreadIndicator,\n    notificationsLimit,\n    pinnedLimit,\n}) {\n    const {\n        notifications,\n        getNotifications,\n        isMoreNotifications,\n\n        pinnedNotifications,\n        getPinnedNotifications,\n        setPinned,\n\n        unreadNotificationsCount,\n        getUnreadNotificationsCount,\n        setRead,\n    } = useContext(NotificationContext);\n\n    const [showAllPinned, setShowAllPinned] = useState(false);\n\n    // Initial data load\n    useEffect(() => {\n        // If pinning notifications is enabled\n        if (enablePinnedNotifications) {\n            getPinnedNotifications();\n        }\n        if (showUnreadIndicator) {\n            getUnreadNotificationsCount();\n        }\n        getNotifications({\n            max: notificationsLimit,\n            includePinned: !enablePinnedNotifications,\n        });\n    }, [enablePinnedNotifications, notificationsLimit]);\n\n    // Handlers for data change\n    const handleSetRead = useCallback(\n        (notification) => {\n            setRead({\n                ...notification,\n                read: true,\n            });\n        },\n        [setRead]\n    );\n    const handleSetPinned = useCallback(\n        (notification) => {\n            setPinned({\n                ...notification,\n                pinned: !notification.pinned,\n            });\n        },\n        [setPinned]\n    );\n\n    // All pinned notification are loaded up front but not all are shown, toggle them all visible or not\n    const handlePinnedShowMore = useCallback(() => {\n        setShowAllPinned(!showAllPinned);\n    }, [setShowAllPinned, showAllPinned]);\n\n    // The main notifications are paged based on the 'notificationsLimit input, grab the next page worth of notifications\n    const handleGetMoreNotifications = useCallback(() => {\n        getNotifications({\n            start: notifications.length,\n            max: notificationsLimit,\n            includePinned: !enablePinnedNotifications,\n        });\n    }, [notifications, notificationsLimit, enablePinnedNotifications]);\n\n    const titleId = uuidv4(); // Popover needs a id for the dialog described by\n    const notificationsContent = (\n        <div className=\"no-wysiwyg notifications\">\n            <div className=\"notifications__header\">\n                <h1 id={titleId} className=\"notifications__title\">\n                    {title}\n                </h1>\n            </div>\n\n            <div className=\"notifications__body\">\n                {enablePinnedNotifications && pinnedNotifications.length > 0 && (\n                    <ul\n                        aria-label=\"Pinned notifications\"\n                        className=\"notifications__list\"\n                    >\n                        <NotificationList\n                            notifications={pinnedNotifications}\n                            showLimit={showAllPinned ? -1 : pinnedLimit}\n                            showMore={handlePinnedShowMore}\n                            pinnedList\n                            pinningAlowed\n                            setRead={handleSetRead}\n                            setPinned={handleSetPinned}\n                        />\n                    </ul>\n                )}\n\n                {enablePinnedNotifications &&\n                    pinnedNotifications.length > pinnedLimit && (\n                        <button\n                            type=\"button\"\n                            onClick={handlePinnedShowMore}\n                            className=\"notifications__expand-pinned\"\n                        >\n                            Show {showAllPinned ? 'less' : 'more'} (\n                            {pinnedNotifications.length - pinnedLimit})\n                        </button>\n                    )}\n\n                <ul aria-label=\"Notifications\" className=\"notifications__list\">\n                    <NotificationList\n                        notifications={notifications}\n                        pinningAlowed={enablePinnedNotifications}\n                        setRead={handleSetRead}\n                        setPinned={handleSetPinned}\n                    />\n                </ul>\n\n                {isMoreNotifications && (\n                    <button\n                        type=\"button\"\n                        onClick={handleGetMoreNotifications}\n                        className=\"notifications__more\"\n                    >\n                        Show more\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n\n    if (popover) {\n        return (\n            <Popover\n                titleId={titleId}\n                trigger={({ props, ref }) => {\n                    return (\n                        <button\n                            ref={ref}\n                            {...props}\n                            type=\"button\"\n                            className=\"notifications-wrapper__action\"\n                        >\n                            {showUnreadIndicator &&\n                                unreadNotificationsCount > 0 && (\n                                    <div\n                                        aria-label=\"unread notifications\"\n                                        className=\"notifications-wrapper__unread\"\n                                    >\n                                        {unreadNotificationsCount}\n                                    </div>\n                                )}\n                            <svg className=\"svg-icon\">\n                                <title>View notifications</title>\n                                <use href=\"#notification\" />\n                            </svg>\n                        </button>\n                    );\n                }}\n                className=\"notification-popover\"\n            >\n                {notificationsContent}\n            </Popover>\n        );\n    }\n\n    return notificationsContent;\n}\n","/* eslint-disable react/button-has-type */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    OverlayContainer,\n    DismissButton,\n    useOverlayTrigger,\n    useOverlayPosition,\n    useOverlay,\n    useModal,\n} from '@react-aria/overlays';\nimport { useButton } from '@react-aria/button';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope } from '@react-aria/focus';\nimport { mergeProps } from '@react-aria/utils';\n\nimport '../css/_global.scss';\n\nconst PopoverContent = React.forwardRef(\n    (\n        { titleId, title, children, isOpen, onClose, className, ...otherProps },\n        ref\n    ) => {\n        // Handle interacting outside the dialog and pressing the Escape key to close the modal.\n        const { overlayProps } = useOverlay(\n            {\n                onClose,\n                isOpen,\n                isDismissable: true,\n            },\n            ref\n        );\n\n        // Hide content outside the modal from screen readers.\n        const { modalProps } = useModal();\n\n        // Get props for the dialog and its title\n        const { dialogProps, titleProps } = useDialog(\n            { 'aria-describedby': titleId },\n            ref\n        );\n\n        return (\n            <FocusScope contain restoreFocus>\n                <div\n                    {...mergeProps(\n                        overlayProps,\n                        dialogProps,\n                        otherProps,\n                        modalProps\n                    )}\n                    ref={ref}\n                    className={`popover__dialog ${className}__dialog`}\n                >\n                    {/* Include a title only if a titleId is not provided */}\n                    {titleId ? (\n                        ''\n                    ) : (\n                        <h2\n                            {...titleProps}\n                            className={`popover__title ${className}__title`}\n                        >\n                            {title}\n                        </h2>\n                    )}\n\n                    {children}\n                    <DismissButton onDismiss={onClose} />\n                </div>\n            </FocusScope>\n        );\n    }\n);\n\n/**\n * Create an ARIA / WCAG compatable popover using @react-aria\n * Modified from: https://react-spectrum.adobe.com/react-aria/useOverlayTrigger.html\n *\n * @param {string} titleId - (optional) Id of an element in the children element to act as dialog title; if not provided 'title' must be.\n * @param {string} title - (optional) Title of the dialog; if not provided 'titleId' must be.\n * @param {function} trigger - Callback function to generate the trigger button for the popover\n * @param {string} className - Class to pre-pend to all internal className definitions\n * @param {string} children - Content of the Popover\n * @returns {JSX.Element}\n */\nexport default function Popover({\n    titleId,\n    title,\n    placement,\n    trigger,\n    className,\n    children,\n}) {\n    // Implementing useOverlayTriggerState so i dont have to add another dependency\n    const [isOpen, setIsOpen] = useState(false);\n\n    const triggerRef = React.useRef();\n    const overlayRef = React.useRef();\n\n    // Get props for the trigger and overlay. This also handles hiding the overlay when a parent element of the trigger scrolls (which invalidates the popover positioning).\n    const { triggerProps, overlayProps } = useOverlayTrigger(\n        { type: 'dialog' },\n        {\n            isOpen,\n        },\n        triggerRef\n    );\n\n    // Get popover positioning props relative to the trigger\n    const { overlayProps: positionProps } = useOverlayPosition({\n        targetRef: triggerRef,\n        overlayRef,\n        placement: placement || 'bottom right',\n        offset: 5,\n        isOpen,\n    });\n\n    // Let the CSS and template decide the correct z-index\n    delete positionProps.style.zIndex;\n\n    // Move properties into CSS variables to make altering them easier\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [key, value] of Object.entries(positionProps.style)) {\n        // eslint-disable-next-line no-restricted-globals\n        positionProps.style[`--popover-${key}`] = !isNaN(value)\n            ? `${value}px`\n            : value;\n\n        delete positionProps.style[key];\n    }\n\n    const { buttonProps } = useButton(\n        {\n            onPress: () => setIsOpen(true),\n        },\n        triggerRef\n    );\n\n    // Get the trigger element from the parent\n    const triggerElement = trigger({\n        props: { ...mergeProps(buttonProps, triggerProps) },\n        ref: triggerRef,\n    });\n\n    return (\n        <>\n            {triggerElement}\n            {isOpen && (\n                <OverlayContainer className={`popover ${className}`}>\n                    <PopoverContent\n                        {...overlayProps}\n                        {...positionProps}\n                        ref={overlayRef}\n                        titleId={titleId}\n                        title={title}\n                        isOpen\n                        onClose={() => {\n                            setIsOpen(false);\n                        }}\n                        className={className}\n                    >\n                        {children}\n                    </PopoverContent>\n                </OverlayContainer>\n            )}\n        </>\n    );\n}\n\nPopover.propTypes = {\n    titleId: PropTypes.string,\n    title: PropTypes.string,\n    trigger: PropTypes.func,\n    className: PropTypes.string,\n};\n\nPopover.defaultProps = {\n    titleId: '',\n    title: 'popover',\n    trigger: ({ props, ref }) => {\n        return (\n            <button {...props} ref={ref}>\n                Open popover\n            </button>\n        );\n    },\n    className: 'popover',\n};\n"],"names":["PromiseDebouncer","constructor","this","requests","Map","debounce","key","promiseFactory","keyForComparison","JSON","stringify","has","promise","finally","delete","set","get","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","Modal","titleId","title","onClose","children","className","contain","restoreFocus","autoFocus","ModalContent","settings","isDismissable","isOpen","modalRef","React","modalContentRef","focusManager","useFocusManager","overlayProps","underlayProps","useOverlay","usePreventScroll","modalProps","useModal","dialogProps","titleProps","useDialog","useEffect","current","removeAttribute","focusFirst","ref","hidden","tabIndex","useDivButtonModalOpen","isModalOpen","setIsModalOpen","useState","openModalRef","useRef","buttonProps","modalOpenProps","useButton","onPress","role","type","NotificationContext","createContext","isLoading","notifications","getNotifications","isMoreNotifications","setRead","unreadNotifications","getUnreadNotificationsCount","pinnedNotifications","getPinnedNotifications","setPinned","NotificationProvider","notificationService","setIsLoading","setPinnedNotifications","setNotifications","setIsMoreNotifications","unreadNotificationsCount","setUnreadNotificationsCount","useCallback","args","then","count","results","result","start","reload","concat","next","Provider","value","updatedNotifications","index","findIndex","notification","id","read","updatedPinnedNotifications","pinned","filter","push","sort","a","b","createdDate","getTime","lastNotification","slice","pop","max","length","NotificationService","Error","forEach","name","promiseDebouncer","notificationAdapter","method","BaseNotification","subtitle","body","onClick","BaseNotificationModal","handleModalClose","onPin","pinningAlowed","createDistance","formatDistance","Date","addSuffix","some","el","includes","e","href","Announcement","course","AnnouncementModal","Assignment","AssignmentModal","dueDate","externalLink","dueDateText","format","NotificationFactory","NotificationsList","showLimit","pinnedList","notificationsToRender","daysAgo","map","i","showDaysSince","Notifications","popover","enablePinnedNotifications","pinnedLimit","notificationsLimit","showUnreadIndicator","NotificationsContent","useContext","showAllPinned","setShowAllPinned","includePinned","handleSetRead","handleSetPinned","handlePinnedShowMore","handleGetMoreNotifications","notificationsContent","showMore","trigger","props","PopoverContent","otherProps","mergeProps","onDismiss","Popover","placement","setIsOpen","triggerRef","overlayRef","triggerProps","useOverlayTrigger","positionProps","useOverlayPosition","targetRef","offset","style","zIndex","Object","entries","isNaN","triggerElement","propTypes","PropTypes","defaultProps"],"sourceRoot":""}