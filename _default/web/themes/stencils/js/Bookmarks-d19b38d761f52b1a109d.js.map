{"version":3,"file":"js/Bookmarks-d19b38d761f52b1a109d.js","mappings":"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","sources":["webpack://Plug-and-Play-Template/./src/modules/_global/js/uuid.js","webpack://Plug-and-Play-Template/./src/modules/bookmarks/jsx/bookmarks.jsx","webpack://Plug-and-Play-Template/./src/modules/collapsible-card/jsx/Card.jsx","webpack://Plug-and-Play-Template/./src/modules/modal/jsx/modal.jsx"],"sourcesContent":["/* eslint-disable no-bitwise */\n/**\n * Generate a (mostly) unique ID in an RFC4122 version 4 compliant format\n * Function ported from initFormSubmissionHandler.\n *\n * @returns String\n *\n * @source https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid\n */\nexport default function uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\n        (\n            c ^\n            (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\n        ).toString(16)\n    );\n}\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n\nimport React, {\n    useState,\n    useCallback,\n    useEffect,\n    useRef,\n    createRef,\n    useContext,\n} from 'react';\nimport { OverlayProvider } from '@react-aria/overlays';\n// import { BookmarkService } from 'PlugAndPlay/_data-layer/js/global';\n// import {\n//     BookmarkProvider,\n//     BookmarkContext,\n// } from 'PlugAndPlay/_data-layer/jsx/global';\nimport uuidv4 from 'PlugAndPlay/_global/js/uuid';\nimport BookmarkContext from './data/BookmarkContext';\n\nimport Modal from '../../modal/jsx/modal';\nimport Card from '../../collapsible-card/jsx/Card';\n\n/**\n * @param url string\n *\n * return true/false if the URL is a valid HTTP or HTTPS URL\n */\nconst isValidURL = (url) => {\n    const res = url.match(\n        /^(((H|h)(T|t)(T|t)(P|p)(S|s)?):\\/\\/)?[-a-zA-Z0-9@:%._+~#=]{2,100}\\.[a-zA-Z]{2,10}(\\/([-a-zA-Z0-9@:%_+.~#?&//=]*))?/\n    );\n\n    return res !== null;\n};\n\n/**\n * Returns the possible favicon URL for the specified URL.\n *\n * @param {string} url The URL.\n * @param {number} size The icon size.\n *\n * @returns {string} The favicon URL.\n */\nconst getFaviconURL = (url, size = 24) => {\n    let faviconURL = ``;\n    try {\n        const linkURL = new URL(url);\n\n        // Use the Google service to retrieve the favicon. Optional param = &sz=64.\n        faviconURL = `https://www.google.com/s2/favicons?domain=${linkURL.hostname}&sz=${size}`;\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(`invalid URL: ${url}`);\n    }\n\n    return faviconURL;\n};\n\n/**\n * Add protocol to URL.\n *\n * @param {string} url The URL to test.\n *\n * @returns {string} URL with protocol.\n */\nconst addProtocol = (url) => {\n    let _url = url;\n    if (!/^(?:f|ht)tps?:\\/\\//.test(url)) {\n        _url = `https://${url}`;\n    }\n    return _url;\n};\n\nfunction QuickLinksDialog({\n    currentLinks,\n    initialView,\n    maxLinks,\n    onDialogClose,\n    initialTitle,\n    initialSubtitle,\n    onSave,\n    formSpec,\n}) {\n    const urlTimer = useRef(null);\n    const urlRef = createRef(null);\n\n    const [view, setView] = useState(initialView);\n    const [title, setTitle] = useState(initialTitle);\n    const [subtitle, setSubtitle] = useState(initialSubtitle);\n    const [links, setLinks] = useState(currentLinks);\n\n    const [editIndex, setEditIndex] = useState(null);\n    const [urlValue, setURLValue] = useState(``);\n    const [URLFieldError, setURLFieldError] = useState(``);\n    const [titleValue, setTitleValue] = useState(``);\n    const [disableSaveButton, setDisableSaveButton] = useState(true);\n\n    const editBookmark = (e, link, index) => {\n        setURLValue(link.url);\n        setTitleValue(link.title);\n        setView(`edit`);\n        setTitle(`Update Bookmark`);\n        setSubtitle(``);\n        setDisableSaveButton(false);\n        setEditIndex(index);\n    };\n\n    const addBookmark = () => {\n        setView(`add`);\n        setTitle(`Add bookmark`);\n        setSubtitle(``);\n        setURLValue(``);\n        setTitleValue(``);\n        setDisableSaveButton(true);\n    };\n\n    const handleGoBack = () => {\n        setView(`list`);\n        setTitle(initialTitle);\n        setSubtitle(initialSubtitle);\n    };\n\n    const handleDeleteBookmark = (e, index) => {\n        const newLinks = [...links];\n        newLinks.splice(index, 1);\n        setLinks(newLinks);\n        setDisableSaveButton(false);\n\n        if (onSave) {\n            onSave(newLinks);\n        }\n\n        if (newLinks.length <= 0) {\n            setView(`add-only`);\n        }\n    };\n\n    const handleSaveBookmark = () => {\n        const newLinks = [...links];\n        if (editIndex !== null && view === `edit`) {\n            newLinks[editIndex].title = titleValue;\n            newLinks[editIndex].url = addProtocol(urlValue);\n\n            setView(`list`);\n            return;\n        }\n        if (view === `add` || view === `add-only`) {\n            if (urlValue) {\n                newLinks.push({\n                    title: titleValue,\n                    url: addProtocol(urlValue),\n                });\n            }\n\n            setLinks(newLinks);\n            onSave(newLinks);\n            setView(`list`);\n        }\n    };\n\n    useEffect(() => {\n        if (urlRef && urlRef.current) {\n            urlRef.current.focus();\n        }\n    }, [view]);\n\n    const handleURLChange = useCallback((event) => {\n        const { value } = event.target;\n        setURLValue(value);\n        clearTimeout(urlTimer.current);\n        setDisableSaveButton(true);\n        urlTimer.current = setTimeout(() => {\n            if (value.trim().length === 0) {\n                setDisableSaveButton(true);\n                setURLFieldError(`URL link is required`);\n            } else if (isValidURL(value) === false) {\n                setDisableSaveButton(true);\n                setURLFieldError(`The given URL link is invalid`);\n            } else {\n                setDisableSaveButton(false);\n                setURLFieldError(``);\n            }\n        }, 1000);\n    }, []);\n\n    const handleTitleChange = useCallback(\n        (event) => {\n            setTitleValue(event.currentTarget.value);\n\n            if (urlValue.length > 0 && URLFieldError !== ``) {\n                setDisableSaveButton(false);\n            }\n        },\n        [urlValue]\n    );\n\n    const handleEnterPress = useCallback(\n        (event) => {\n            if (event.keyCode === 13 && URLFieldError === ``) {\n                handleSaveBookmark();\n            }\n        },\n        [URLFieldError]\n    );\n\n    function customFooter(canSave) {\n        return (\n            <footer\n                className={[\n                    `quicklinks-modal__footer`,\n                    view !== 'list' && `quicklinks-modal__footer-right-aligned`,\n                ].join(' ')}\n            >\n                {view === 'list' ? (\n                    <>\n                        {links && links.length === maxLinks ? (\n                            <p className=\"quicklinks__dialog-limit-message\">\n                                You have reached your bookmark limit.\n                            </p>\n                        ) : (\n                            <div className=\"quicklinks-modal__footer-buttons-container\">\n                                <button\n                                    aria-label=\"Add new bookmark\"\n                                    type=\"button\"\n                                    className=\"quicklinks-modal__footer-button quicklinks-modal__footer-button--dashed\"\n                                    onClick={(e) => addBookmark(e)}\n                                >\n                                    <svg className=\"svg-icon\">\n                                        <use href=\"#add\" />\n                                    </svg>\n                                </button>\n                            </div>\n                        )}\n                    </>\n                ) : (\n                    <div className=\"quicklinks-modal__footer-buttons-container\">\n                        {links && links.length > 0 && (\n                            <button\n                                type=\"button\"\n                                className=\"quicklinks-modal__footer-button\"\n                                aria-label=\"Go back\"\n                                onClick={(e) => handleGoBack(e)}\n                            >\n                                Go Back\n                            </button>\n                        )}\n                        <button\n                            type=\"button\"\n                            aria-label=\"Save new bookmark\"\n                            disabled={canSave}\n                            className=\"quicklinks-modal__footer-button quicklinks-modal__footer-button--save\"\n                            onClick={(e) => handleSaveBookmark(e)}\n                        >\n                            Save\n                        </button>\n                    </div>\n                )}\n            </footer>\n        );\n    }\n\n    const titleId = uuidv4(); // Modal needs a id for the dialog described by\n    return (\n        <OverlayProvider>\n            <Modal\n                titleId={titleId}\n                className=\"quicklinks-modal\"\n                onClose={onDialogClose}\n            >\n                <header className=\"quicklinks-modal__header\">\n                    <h1 id={titleId} className=\"quicklinks-modal__title\">\n                        {title}\n                    </h1>\n                    {subtitle && (\n                        <h2 className=\"quicklinks-modal__subtitle\">\n                            {subtitle}\n                        </h2>\n                    )}\n                    <button\n                        type=\"button\"\n                        onClick={onDialogClose}\n                        className=\"quicklinks-modal__header-close\"\n                    >\n                        <svg className=\"svg-icon\">\n                            <title>Close modal</title>\n                            <use href=\"#close\" />\n                        </svg>\n                    </button>\n                </header>\n\n                <div className=\"quicklinks-modal__body\">\n                    {view === `list` && (\n                        <>\n                            {links &&\n                                links.map((link, index) => {\n                                    return (\n                                        <div\n                                            className=\"quicklinks-modal__container\"\n                                            key={index}\n                                        >\n                                            <button\n                                                type=\"button\"\n                                                aria-label={`Edit bookmark ${link.title}`}\n                                                className=\"quicklinks-modal__edit-button\"\n                                                onClick={(e) =>\n                                                    editBookmark(e, link, index)\n                                                }\n                                            >\n                                                <div className=\"bookmark-icon\">\n                                                    <img\n                                                        alt=\"link icon\"\n                                                        className=\"bookmark-icon-image\"\n                                                        height={24}\n                                                        src={getFaviconURL(\n                                                            link.url\n                                                        )}\n                                                        loading=\"lazy\"\n                                                        width={24}\n                                                    />\n                                                </div>\n                                                <div className=\"quicklinks-modal__edit-button-title\">\n                                                    {link.title}\n                                                </div>\n                                                <svg className=\"svg-icon\">\n                                                    <use href=\"#edit\" />\n                                                </svg>\n                                            </button>\n\n                                            <button\n                                                type=\"button\"\n                                                aria-label={`Delete bookmark ${link.title}`}\n                                                className=\"quicklinks-modal__delete-button\"\n                                                onClick={(e) =>\n                                                    handleDeleteBookmark(\n                                                        e,\n                                                        index\n                                                    )\n                                                }\n                                            >\n                                                <svg className=\"svg-icon\">\n                                                    <use href=\"#subtract-alt\" />\n                                                </svg>\n                                            </button>\n                                        </div>\n                                    );\n                                })}\n                        </>\n                    )}\n                    {(view === `add` ||\n                        view === `add-only` ||\n                        view === `edit`) && (\n                        <div className=\"form custom-form custom-form--color-grey70\">\n                            <div\n                                className=\"sq-form-question sq-form-question-text\"\n                                id=\"sq_form_field_wrapper_bookmark-url\"\n                            >\n                                <label\n                                    className=\"sq-form-question-title\"\n                                    htmlFor=\"bookmark-url-input\"\n                                >\n                                    URL link\n                                    <abbr\n                                        className=\"sq-form-required-field\"\n                                        title=\"required\"\n                                    >\n                                        *\n                                    </abbr>\n                                </label>\n                                <div className=\"sq-form-question-answer\">\n                                    <input\n                                        ref={urlRef}\n                                        autoComplete=\"off\"\n                                        autoCapitalize=\"off\"\n                                        type=\"text\"\n                                        name=\"bookmark-url\"\n                                        size=\"30\"\n                                        maxLength=\"300\"\n                                        placeholder={\n                                            formSpec.linkUrlPlaceholder\n                                        }\n                                        id=\"bookmark-url-input\"\n                                        className=\"sq-form-field\"\n                                        value={urlValue}\n                                        onChange={handleURLChange}\n                                        onKeyDown={handleEnterPress}\n                                    />\n                                </div>\n                                <span className=\"sq-form-error\">\n                                    {URLFieldError}\n                                </span>\n                            </div>\n                            <div\n                                className=\"sq-form-question sq-form-question-text\"\n                                id=\"sq_form_field_wrapper_bookmark-title\"\n                            >\n                                <label\n                                    className=\"sq-form-question-title\"\n                                    htmlFor=\"bookmark-tile-input\"\n                                >\n                                    Name of bookmark\n                                </label>\n                                <div className=\"sq-form-question-answer\">\n                                    <input\n                                        autoComplete=\"off\"\n                                        type=\"text\"\n                                        name=\"bookmark-title\"\n                                        size=\"30\"\n                                        maxLength=\"300\"\n                                        placeholder={\n                                            formSpec.linkTitlePlaceholder\n                                        }\n                                        id=\"bookmark-tile-input\"\n                                        className=\"sq-form-field\"\n                                        value={titleValue}\n                                        onChange={handleTitleChange}\n                                        onKeyDown={handleEnterPress}\n                                    />\n                                </div>\n                                <em className=\"sq-form-question-note\">\n                                    Try to keep it as short as possible.\n                                </em>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                {customFooter(disableSaveButton)}\n            </Modal>\n        </OverlayProvider>\n    );\n}\n\nfunction QuickLinksList({\n    links,\n    maxLinks,\n    dialogView,\n    addBookmarks,\n    onDialogClose,\n    onSave,\n    formSpec,\n    listSpec,\n}) {\n    const handleClick = (e, location) => {\n        if (listSpec.openLinkTarget === '_blank') {\n            window.open(location, '_blank');\n        } else {\n            window.location.href = location;\n        }\n    };\n\n    return (\n        <div className=\"quicklinks__list\">\n            {links &&\n                links.map((link, index) => {\n                    return (\n                        <div className=\"quicklinks__link\" key={index}>\n                            <button\n                                type=\"button\"\n                                aria-label={`Open bookmark ${link.title}`}\n                                className=\"quicklinks__button\"\n                                onClick={(e) => handleClick(e, link.url)}\n                            >\n                                <div className=\"quicklinks__link-icon\">\n                                    <img\n                                        alt=\"link icon\"\n                                        className=\"quicklinks__link-icon-image\"\n                                        height={24}\n                                        src={getFaviconURL(link.url)}\n                                        loading=\"lazy\"\n                                        width={24}\n                                    />\n                                </div>\n                                <div className=\"quicklinks__link-title\">\n                                    {link.title}\n                                </div>\n                            </button>\n                        </div>\n                    );\n                })}\n            {(!maxLinks || links.length < maxLinks) && (\n                <div className=\"quicklinks__link\">\n                    <button\n                        type=\"button\"\n                        aria-label=\"Add new bookmark\"\n                        className=\"quicklinks__button quicklinks__button--dashed\"\n                        onClick={addBookmarks}\n                    >\n                        <svg className=\"svg-icon\">\n                            <use href=\"#add\" />\n                        </svg>\n                    </button>\n                </div>\n            )}\n            {dialogView === `list` && (\n                <QuickLinksDialog\n                    currentLinks={links}\n                    maxLinks={maxLinks}\n                    onDialogClose={onDialogClose}\n                    initialView={dialogView}\n                    initialTitle=\"Bookmarks\"\n                    initialSubtitle=\"Add up to four bookmarks.\"\n                    onSave={onSave}\n                    formSpec={formSpec}\n                />\n            )}\n            {dialogView === `add-only` && (\n                <QuickLinksDialog\n                    currentLinks={links}\n                    maxLinks={maxLinks}\n                    onDialogClose={onDialogClose}\n                    initialView={dialogView}\n                    initialTitle=\"New bookmark\"\n                    onSave={onSave}\n                    formSpec={formSpec}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default function Bookmarks({ title, maxLinks, formSpec, listSpec }) {\n    const [showEditBookmarks, setShowEditBookmarks] = useState(false);\n    const [dialogView, setDialogView] = useState('list');\n    const { bookmarks, getBookmarks, updateBookmarks } =\n        useContext(BookmarkContext);\n\n    useEffect(() => {\n        (async () => {\n            await getBookmarks();\n            if (bookmarks.length <= 0) {\n                setDialogView('add-only');\n            } else {\n                setDialogView('list');\n            }\n        })();\n    }, []);\n\n    const editBookmarks = useCallback(() => {\n        if (bookmarks.length <= 0) {\n            setDialogView('add-only');\n        } else {\n            setDialogView('list');\n        }\n        setShowEditBookmarks(true);\n    }, [bookmarks]);\n\n    const addBookmarks = useCallback(() => {\n        setDialogView('add-only');\n        setShowEditBookmarks(true);\n    }, []);\n\n    const handleDialogClose = useCallback(() => {\n        setShowEditBookmarks(false);\n    }, []);\n\n    const handleSave = useCallback((newBookmarks) => {\n        (async () => {\n            await updateBookmarks(newBookmarks);\n        })();\n    }, []);\n\n    const headingIcon = () => {\n        return (\n            <button\n                type=\"button\"\n                aria-label=\"Edit bookmarks\"\n                onClick={editBookmarks}\n                className=\"heading-icon\"\n            >\n                <svg className=\"svg-icon\">\n                    <use href=\"#edit\" />\n                </svg>\n            </button>\n        );\n    };\n\n    return (\n        <Card\n            headingIcon={headingIcon()}\n            title={title}\n            wrapperClasses=\"quicklinks\"\n            contentClasses=\"quicklinks__container\"\n        >\n            <QuickLinksList\n                dialogView={showEditBookmarks === true ? dialogView : undefined}\n                links={bookmarks}\n                maxLinks={maxLinks}\n                onDialogClose={handleDialogClose}\n                onSave={handleSave}\n                formSpec={formSpec}\n                listSpec={listSpec}\n                addBookmarks={addBookmarks}\n            />\n        </Card>\n    );\n}\n\nBookmarks.defaultProps = {\n    maxLinks: 4,\n    title: ``,\n    documentId: 666,\n    listSpec: {\n        openLinkTarget: `_blank`,\n    },\n    formSpec: {\n        linkUrlPlaceholder: `Enter your link url`,\n        linkTitlePlaceholder: `Enter your link title`,\n    },\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useCallback, useState } from 'react';\n\nexport default function Card(props) {\n    const {\n        wrapperClasses,\n        contentClasses,\n        children,\n        id,\n        headingIcon,\n        isCollapsable,\n        isInitialCollapsed,\n        isScrollable,\n        subTitle,\n        title,\n        ...rest\n    } = props;\n\n    let storageId = ``;\n\n    if (id) {\n        storageId = `ComponentCard-${id}`;\n    }\n\n    let storageIsCollapsed = isInitialCollapsed || false;\n    if (storageId) {\n        storageIsCollapsed = localStorage.getItem(storageId) === `collapsed`;\n    }\n\n    const [isCollapsed, setCollapsed] = useState(storageIsCollapsed);\n\n    const wrapperClass = [\n        'collapsable-card',\n        'no-wysiwyg',\n        wrapperClasses,\n    ].join(' ');\n    const contentClass = [\n        'collapsable-card__contents',\n        contentClasses,\n        isScrollable && 'collapsable-card--scrollable',\n    ].join(' ');\n    const collapseClass = [\n        'svg-icon',\n        isCollapsed === false && 'collapsable-card__collapsed',\n    ].join(' ');\n\n    const toggleIsCollapsed = useCallback(() => {\n        setCollapsed(!isCollapsed);\n\n        if (storageId) {\n            localStorage.setItem(storageId, !isCollapsed ? `collapsed` : ``);\n        }\n    }, [storageId, isCollapsed]);\n\n    return (\n        <div className={wrapperClass} id={id} {...rest}>\n            <button\n                className=\"collapsable-card__header\"\n                type=\"button\"\n                onClick={toggleIsCollapsed}\n                aria-expanded={!isCollapsed}\n                aria-controls={`content-${id}`}\n            >\n                <h2 className=\"collapsable-card__header-text\">{title}</h2>\n                <div className=\"collapsable-card__header-right\">\n                    {subTitle && (\n                        <h3 className=\"collapsable-card__header-text collapsable-card__header-text--sub-title\">\n                            {subTitle}\n                        </h3>\n                    )}\n                    {isCollapsable && (\n                        <svg\n                            className={`${collapseClass} collapsable-card__more-menu-icon`}\n                        >\n                            <title>\n                                {isCollapsed\n                                    ? `Expand panel`\n                                    : `Collapse panel`}\n                            </title>\n                            <use href=\"#chevron\" />\n                        </svg>\n                    )}\n                    {headingIcon}\n                </div>\n            </button>\n            {(isCollapsable !== true ||\n                (isCollapsable === true && isCollapsed === false)) && (\n                <div\n                    className={contentClass}\n                    id={`content-${id}`}\n                    role=\"region\"\n                    tabIndex={-1}\n                >\n                    {children}\n                </div>\n            )}\n        </div>\n    );\n}\n","/* eslint-disable react/jsx-props-no-spreading */ // Disabled as prop spreading is the documented way to use the @react-aria framework\nimport React, { useEffect } from 'react';\nimport {\n    useOverlay,\n    usePreventScroll,\n    useModal,\n    OverlayContainer,\n} from '@react-aria/overlays';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope, useFocusManager } from '@react-aria/focus';\n\n/**\n * React implementation of the Plug and Play Modal, uses the Adobe @react-aria package\n * to handle the modal / dialog related accessability concerns such as focus movement, focus traps,\n * ESC to close ect.\n *\n * Needs to be wrapped within a <OverlayProvider> to aria hide the application when the modal opens.\n *\n * Comments on @react-aria hooks come directly from their documentation.\n */\nexport default function Modal({\n    titleId,\n    title,\n    onClose,\n    children,\n    className,\n}) {\n    return (\n        <OverlayContainer>\n            <div\n                className={`no-wysiwyg modal-wrapper ${\n                    className ? `${className}-wrapper` : ''\n                }`}\n            >\n                <FocusScope contain restoreFocus autoFocus>\n                    <ModalContent\n                        titleId={titleId}\n                        title={title}\n                        onClose={onClose}\n                        className={className}\n                    >\n                        {children}\n                    </ModalContent>\n                </FocusScope>\n            </div>\n        </OverlayContainer>\n    );\n}\n\nfunction ModalContent({ titleId, title, onClose, children, className }) {\n    // Base settings for @react-aria hooks\n    const settings = {\n        'aria-describedby': titleId,\n        title,\n        onClose,\n        isDismissable: true,\n        isOpen: true,\n    };\n\n    const modalRef = React.useRef();\n    const modalContentRef = React.useRef();\n    const focusManager = useFocusManager();\n\n    /*\n        Provides the behavior for overlays such as dialogs, popovers, and menus. Hides the overlay when\n        the user interacts outside it, when the Escape key is pressed, or optionally, on blur.\n    */\n    const { overlayProps, underlayProps } = useOverlay(\n        settings,\n        modalContentRef\n    );\n\n    /*\n        Prevents scrolling on the document body on mount, and restores it on unmount.\n        Also ensures that content does not shift due to the scrollbars disappearing.\n    */\n    usePreventScroll();\n\n    /*\n        Hides content outside the current <OverlayContainer> from screen readers on mount and restores it on unmount.\n    */\n    const { modalProps } = useModal();\n\n    /*\n        Provides the behavior and accessibility implementation for a dialog component.\n    */\n    const { dialogProps, titleProps } = useDialog(settings, modalContentRef);\n\n    /*\n        Remove the hidden attribute as soon as its drawn to the DOM so it transitions open like\n        the base ES6 modal in the framework.\n    */\n    useEffect(() => {\n        modalRef.current.removeAttribute('hidden');\n        focusManager.focusFirst(); // FocusScope autofocus property wont work due to being hidden so focus first now\n    }, [modalRef]);\n\n    return (\n        <div\n            ref={modalRef}\n            {...underlayProps}\n            hidden\n            className={`modal ${className || ''}`}\n        >\n            <div\n                ref={modalContentRef}\n                {...overlayProps}\n                {...dialogProps}\n                {...modalProps}\n                aria-modal=\"true\"\n                tabIndex=\"-1\"\n                className={`modal__content ${\n                    className ? `${className}__content` : ''\n                }`}\n            >\n                {titleId ? (\n                    ''\n                ) : (\n                    <h2\n                        {...titleProps}\n                        className={`${className ? `${className}__title` : ''}`}\n                    >\n                        {title}\n                    </h2>\n                )}\n                {children}\n            </div>\n        </div>\n    );\n}\n"],"names":["uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","getFaviconURL","url","size","faviconURL","linkURL","URL","hostname","error","console","addProtocol","_url","test","QuickLinksDialog","currentLinks","initialView","maxLinks","onDialogClose","initialTitle","initialSubtitle","onSave","formSpec","urlTimer","useRef","urlRef","createRef","view","setView","useState","title","setTitle","subtitle","setSubtitle","links","setLinks","editIndex","setEditIndex","urlValue","setURLValue","URLFieldError","setURLFieldError","titleValue","setTitleValue","disableSaveButton","setDisableSaveButton","handleSaveBookmark","newLinks","push","useEffect","current","focus","handleURLChange","useCallback","event","value","target","clearTimeout","setTimeout","trim","length","match","handleTitleChange","currentTarget","handleEnterPress","keyCode","titleId","className","onClose","id","type","onClick","href","map","link","index","key","e","editBookmark","alt","height","src","loading","width","splice","handleDeleteBookmark","htmlFor","ref","autoComplete","autoCapitalize","name","maxLength","placeholder","linkUrlPlaceholder","onChange","onKeyDown","linkTitlePlaceholder","canSave","join","disabled","QuickLinksList","dialogView","addBookmarks","listSpec","handleClick","location","openLinkTarget","window","open","Bookmarks","showEditBookmarks","setShowEditBookmarks","setDialogView","bookmarks","getBookmarks","updateBookmarks","useContext","BookmarkContext","editBookmarks","handleDialogClose","handleSave","newBookmarks","headingIcon","wrapperClasses","contentClasses","undefined","defaultProps","documentId","Card","props","children","isCollapsable","isInitialCollapsed","isScrollable","subTitle","rest","storageId","storageIsCollapsed","localStorage","getItem","isCollapsed","setCollapsed","wrapperClass","contentClass","collapseClass","toggleIsCollapsed","setItem","role","tabIndex","Modal","contain","restoreFocus","autoFocus","ModalContent","settings","isDismissable","isOpen","modalRef","React","modalContentRef","focusManager","useFocusManager","overlayProps","underlayProps","useOverlay","usePreventScroll","modalProps","useModal","dialogProps","titleProps","useDialog","removeAttribute","focusFirst","hidden"],"sourceRoot":""}